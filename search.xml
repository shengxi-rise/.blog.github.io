<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>23工训</title>
      <link href="/%E7%AB%9E%E8%B5%9B/2023/10/17/%E7%AB%9E%E8%B5%9B/23%E5%B7%A5%E8%AE%AD/"/>
      <url>/%E7%AB%9E%E8%B5%9B/2023/10/17/%E7%AB%9E%E8%B5%9B/23%E5%B7%A5%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>paddle</title>
      <link href="/Deep-learning/2023/10/16/deep%20learning/paddle/"/>
      <url>/Deep-learning/2023/10/16/deep%20learning/paddle/</url>
      
        <content type="html"><![CDATA[<p>基本是工训备赛过程中，使用到Paddle框架的例子</p><span id="more"></span><h1 id="Paddle安装"><a href="#Paddle安装" class="headerlink" title="Paddle安装"></a>Paddle安装</h1><ul><li><a href="https://paddleinference.paddlepaddle.org.cn/user_guides/download_lib.html#windows">离线安装链接</a></li><li><a href="https://github.com/PaddlePaddle">仓库</a></li></ul><h2 align=center style=color:yellow>记得安装cuda，还有cudnn，以及版本要对应上</h2><h1 id="PaddleYOLO使用方法"><a href="#PaddleYOLO使用方法" class="headerlink" title="PaddleYOLO使用方法"></a><a href="https://github.com/PaddlePaddle/PaddleYOLO">PaddleYOLO</a>使用方法</h1><h2 id="训练自己的数据集-官方教程"><a href="#训练自己的数据集-官方教程" class="headerlink" title="训练自己的数据集 官方教程"></a>训练自己的数据集 <a href="https://github.com/PaddlePaddle/PaddleYOLO/issues/43">官方教程</a></h2><h3 id="数据集标注"><a href="#数据集标注" class="headerlink" title="数据集标注"></a>数据集标注</h3><ul><li>看清楚模型训练的数据集格式以及对应的配置文件</li><li>VOC或者是COCO格式等等</li><li><a href="https://github.com/PaddlePaddle/PaddleDetection/blob/release/2.1/docs/tutorials/PrepareDataSet.md">准备</a></li></ul><p>标注软件：<a href="https://pypi.org/project/labelImg/1.4.0/">labelimg</a></p><h3 align=center style=color:yellow>修改对应的配置文件</h3><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202310171950453.png" alt="image-20231017195049381"></p><h3 id="配置文件-配置"><a href="#配置文件-配置" class="headerlink" title="配置文件 配置"></a>配置文件 <a href="https://github.com/PaddlePaddle/PaddleDetection/blob/release/2.1/docs/tutorials/config_annotation/ppyolo_r50vd_dcn_1x_coco_annotation.md">配置</a></h3><p><a href="https://blog.csdn.net/qq_44703886/article/details/118667944">相关文件</a></p><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202310171947769.png" alt="image-20231017194747641"></p><h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><p>详细的命令参数去官网上看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">训练</span><br>python tools/train.py -c configs/yolov3/yolov3_darknet53_270e_voc.yml --eval --use_vdl=true --vdl_log_dir=vdl_dir/garbage_tenth<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Paddle继续训练，加个参数 -r</span><br>python tools/train.py -c configs/yolov3/yolov3_darknet53_270e_voc.yml --eval --use_vdl=true --vdl_log_dir=vdl_dir/garbage_tenth -r D:/19693/Desktop/DeepLearning/PaddleYOLO/output/10_12/29.pdparams<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">推理</span><br>python tools/infer.py -c configs/yolov3/yolov3_darknet53_270e_voc.yml --infer_img=&quot;D:/19693/Desktop/grabage_data/grabage_4cls_3/images/img1.jpg&quot; -o weights=&quot;D:/19693/Desktop/DeepLearning/PaddleYOLO/output/yolov3_darknet53_270e_voc/best_model.pdparams&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">模型评估</span><br>python tools/eval.py -c configs/yolov3/yolov3_darknet53_270e_voc.yml -o weights=&quot;D:/19693/Desktop/DeepLearning/PaddleYOLO/output/100_yolov3_darknet53_270e_voc/model_final.pdparams&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可视化</span><br>visualdl --logdir vdl_dir/garbage_eigth<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">导出模型</span><br>python tools/export_model.py -c configs/yolov3/yolov3_darknet53_270e_voc.yml --output_dir=./inference_model/10_14 -o weights=&quot;D:/WebDownload/49.pdparams&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 部署检测 摄像头</span></span><br>python deploy/python/infer.py --model_dir=&quot;D:\19693\Desktop\DeepLearning\PaddleYOLO\inference_model\10_14\yolov3_darknet53_270e_voc&quot; --camera_id=1 --device=GPU<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">部署推理</span><br>python deploy/python/infer.py --model_dir=&quot;D:/19693/Desktop/DeepLearning/PaddleYOLO/inference_model/82.7_yolov3_darknet53_270e_voc&quot; --image_dir=&quot;D:/19693/Desktop/grabage_data/4_cls/valid&quot; --device=GPU --output_dir=output/valid<br><br></code></pre></td></tr></table></figure><h1 id="训练错误"><a href="#训练错误" class="headerlink" title="训练错误"></a>训练错误</h1><h3 id="CUDA-700"><a href="#CUDA-700" class="headerlink" title="CUDA[700]"></a>CUDA[700]</h3><blockquote><p>目前怀疑是版本装错了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">OSError: (External) CUDA error(700), an illegal memory access was encountered.<br>  [Hint: Please search for the error code(700) on website (https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3f51e3575c2178246db0a94a430e0038) to get Nvidia&#x27;s official solution and advice about CUDA Error.] (at ../paddle/phi/backends/gpu/cuda/cuda_info.cc:259)<br></code></pre></td></tr></table></figure><h3 id="opencv-错误"><a href="#opencv-错误" class="headerlink" title="opencv 错误"></a>opencv 错误</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[09/15 08:14:44] reader WARNING: fail to map batch transform [BatchRandomResize_cf5b10] with error: OpenCV(4.5.5) :-1: error: (-5:Bad argument) in function &#x27;resize&#x27;<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">Overload resolution failed:</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"> - Conversion error: src</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"> - Expected Ptr&lt;cv::UMat&gt; <span class="hljs-keyword">for</span> argument <span class="hljs-string">&#x27;src&#x27;</span></span><br> and stack:<br>Traceback (most recent call last):<br>  File &quot;D:\19693\Desktop\DeepLearning\PaddleYOLO\ppdet\data\reader.py&quot;, line 78, in __call__<br>    data = f(data)<br>  File &quot;D:\19693\Desktop\DeepLearning\PaddleYOLO\ppdet\data\transform\batch_operators.py&quot;, line 155, in __call__<br>    return resizer(samples, context=context)<br>  File &quot;D:\19693\Desktop\DeepLearning\PaddleYOLO\ppdet\data\transform\operators.py&quot;, line 102, in __call__<br>    sample[i] = self.apply(sample[i], context)<br>  File &quot;D:\19693\Desktop\DeepLearning\PaddleYOLO\ppdet\data\transform\operators.py&quot;, line 1298, in apply<br>    im = self.apply_image(sample[&#x27;image&#x27;], [im_scale_x, im_scale_y])<br>  File &quot;D:\19693\Desktop\DeepLearning\PaddleYOLO\ppdet\data\transform\operators.py&quot;, line 1195, in apply_image<br>    return cv2.resize(<br>cv2.error: OpenCV(4.5.5) :-1: error: (-5:Bad argument) in function &#x27;resize&#x27;<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">Overload resolution failed:</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"> - Conversion error: src</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"> - Expected Ptr&lt;cv::UMat&gt; <span class="hljs-keyword">for</span> argument <span class="hljs-string">&#x27;src&#x27;</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
            <tag> 工训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一总结</title>
      <link href="/uncategorized/2023/08/20/%E5%85%B6%E5%AE%83/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93/"/>
      <url>/uncategorized/2023/08/20/%E5%85%B6%E5%AE%83/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>拖</p><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Clion编译Qt程序带图标</title>
      <link href="/Qt/2023/08/10/Qt/Clion%E7%BC%96%E8%AF%91Qt%E7%A8%8B%E5%BA%8F%E5%B8%A6%E5%9B%BE%E6%A0%87/"/>
      <url>/Qt/2023/08/10/Qt/Clion%E7%BC%96%E8%AF%91Qt%E7%A8%8B%E5%BA%8F%E5%B8%A6%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>编译出来的程序有图标喔</p><span id="more"></span><p>在项目的路径下创建一个*.rc* 文件，写上以下内容，其实我觉得有图标信息就行了，其它应该不需要的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++">id ICON <span class="hljs-string">&quot;logo.ico&quot;</span>   <span class="hljs-comment">//添加图标</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winver.h&gt;</span></span><br><br>VS_VERSION_INFO VERSIONINFO<br>    FILEVERSION <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span><br>    PRODUCTVERSION <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span><br>    FILEFLAGSMASK <span class="hljs-number">0x3f</span>L<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _DEBUG</span><br>    FILEFLAGS VS_FF_DEBUG<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    FILEFLAGS <span class="hljs-number">0x0</span>L<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    FILEOS VOS__WINDOWS32<br>    FILETYPE VFT_DLL<br>    FILESUBTYPE <span class="hljs-number">0x0</span>L<br>    BEGIN<br>        BLOCK <span class="hljs-string">&quot;StringFileInfo&quot;</span><br>        BEGIN<br>            BLOCK <span class="hljs-string">&quot;080404b0&quot;</span>  <span class="hljs-comment">//支持中文</span><br>            BEGIN<br>                VALUE <span class="hljs-string">&quot;CompanyName&quot;</span>, <span class="hljs-string">&quot;***有限公司\0&quot;</span><br>                VALUE <span class="hljs-string">&quot;FileDescription&quot;</span>, <span class="hljs-string">&quot;软件名称\0&quot;</span><br>                VALUE <span class="hljs-string">&quot;FileVersion&quot;</span>, <span class="hljs-string">&quot;1.0.0.10\0&quot;</span><br>                VALUE <span class="hljs-string">&quot;ProductVersion&quot;</span>, <span class="hljs-string">&quot;1.0.0.10\0&quot;</span><br>                VALUE <span class="hljs-string">&quot;LegalCopyright&quot;</span>, <span class="hljs-string">&quot;版权所有 (C) ***有限公司\0&quot;</span><br>                VALUE <span class="hljs-string">&quot;LegalTrademarks&quot;</span>, <span class="hljs-string">&quot;***有限公司\0&quot;</span><br>                VALUE <span class="hljs-string">&quot;OriginalFilename&quot;</span>, <span class="hljs-string">&quot;version.exe\0&quot;</span><br>                VALUE <span class="hljs-string">&quot;ProductName&quot;</span>, <span class="hljs-string">&quot;软件名称\0&quot;</span><br>                VALUE <span class="hljs-string">&quot;InternalName&quot;</span>, <span class="hljs-string">&quot;version.exe\0&quot;</span><br>           END<br>        END<br>        <br>        BLOCK <span class="hljs-string">&quot;VarFileInfo&quot;</span><br>        BEGIN<br>            VALUE <span class="hljs-string">&quot;Translation&quot;</span>, <span class="hljs-number">0x804</span>, <span class="hljs-number">1200</span>  <span class="hljs-comment">//语言-简体中文</span><br>        END        <br>    END<br><br><br></code></pre></td></tr></table></figure><h3 id="编译此文件"><a href="#编译此文件" class="headerlink" title="编译此文件"></a>编译此文件</h3><blockquote><p>我觉得最关键的就是编译这个文件，之前失败有可能就是这样</p></blockquote><p>在项目主目录打开终端，运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">windres -i &quot;ico.rc&quot; -o &quot;ico.o&quot;<br></code></pre></td></tr></table></figure><p>如果找不到windres的话，可以去mingw那里看看，自带有的。</p><p>最重要的就是.o文件，类似于后面要链接的吧。</p><p>然后在add_executable那里添加上ico.o文件就行了，这样就会把图标和信息添加到exe中。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clion </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch入门</title>
      <link href="/Deep-learning/2023/08/07/deep%20learning/pytroch%E5%85%A5%E9%97%A8/"/>
      <url>/Deep-learning/2023/08/07/deep%20learning/pytroch%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Pytorch相关操作</p><span id="more"></span><blockquote><p>官方教程阅读遇到的问题</p></blockquote><h2 id="基本数据操作"><a href="#基本数据操作" class="headerlink" title="基本数据操作"></a>基本数据操作</h2><h3 id="构建矩阵"><a href="#构建矩阵" class="headerlink" title="构建矩阵"></a>构建矩阵</h3><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h3 id="相关的CLASS"><a href="#相关的CLASS" class="headerlink" title="相关的CLASS"></a>相关的CLASS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.nn.MaxPool2d(kernel_size, stride=<span class="hljs-literal">None</span>, padding=<span class="hljs-number">0</span>, dilation=<span class="hljs-number">1</span>, return_indices=<span class="hljs-literal">False</span>, ceil_mode=<span class="hljs-literal">False</span>)<br><br>torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>, dilation=<span class="hljs-number">1</span>, groups=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">True</span>, padding_mode=<span class="hljs-string">&#x27;zeros&#x27;</span>, device=<span class="hljs-literal">None</span>, dtype=<span class="hljs-literal">None</span>)<br><br>torch.nn.Linear(in_features, out_features, bias=<span class="hljs-literal">True</span>, device=<span class="hljs-literal">None</span>, dtype=<span class="hljs-literal">None</span>)<br><br><br></code></pre></td></tr></table></figure><h3 id="更新神经网络参数"><a href="#更新神经网络参数" class="headerlink" title="更新神经网络参数"></a>更新神经网络参数</h3><ol><li>更新规则</li></ol><p>​类似于 SGD, Nesterov-SGD, Adam, RMSProp, 等。为了让这可行，我们建立了一个小包：torch.optim 实现了所有的方法。使用它非常 的简单。</p><h3 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h3><ul><li>每个类的参数要记住</li><li>linear可不可以直接就回归到10</li><li>各个参数的设立是不是有什么联系</li><li></li></ul><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202308071627376.png" alt="image-20230807162709234"></p><ul><li>这是什么，不是很理解</li></ul><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202308071649727.png" alt="image-20230807164914675"></p><ul><li><p>梯度，这个在搞什么飞机</p><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202308081445297.png" alt="image-20230808144504186"></p></li><li><p>雅可比向量积是什么</p></li></ul><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202308081449085.png" alt="image-20230808144923023"></p>]]></content>
      
      
      <categories>
          
          <category> Deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch基础</title>
      <link href="/Deep-learning/2023/08/07/deep%20learning/pytorch%E5%9F%BA%E7%A1%80/"/>
      <url>/Deep-learning/2023/08/07/deep%20learning/pytorch%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>定义一个模型</p><span id="more"></span><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202308081515948.png" alt="image-20230808151532902"></p><h1 id="定义神经网络"><a href="#定义神经网络" class="headerlink" title="定义神经网络"></a>定义神经网络</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-built_in">super</span>(Net, self).__init__()<br>     <span class="hljs-comment"># 1 input image channel, 6 output channels, 5x5 square convolution</span><br>     <span class="hljs-comment"># kernel</span><br>     self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>)<br>     self.conv2 = nn.Conv2d(<span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>)<br>     <span class="hljs-comment"># an affine operation: y = Wx + b</span><br>     self.fc1 = nn.Linear(<span class="hljs-number">16</span> * <span class="hljs-number">5</span> * <span class="hljs-number">5</span>, <span class="hljs-number">120</span>)<br>     self.fc2 = nn.Linear(<span class="hljs-number">120</span>, <span class="hljs-number">84</span>)<br>     self.fc3 = nn.Linear(<span class="hljs-number">84</span>, <span class="hljs-number">10</span>)<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>     <span class="hljs-comment"># Max pooling over a (2, 2) window</span><br>     x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>     <span class="hljs-comment"># If the size is a square you can only specify a single number</span><br>     x = F.max_pool2d(F.relu(self.conv2(x)), <span class="hljs-number">2</span>)<br>     x = x.view(-<span class="hljs-number">1</span>, self.num_flat_features(x))<br>     x = F.relu(self.fc1(x))<br>     x = F.relu(self.fc2(x))<br>     x = self.fc3(x)<br>     <span class="hljs-keyword">return</span> x<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">num_flat_features</span>(<span class="hljs-params">self, x</span>):<br>     size = x.size()[<span class="hljs-number">1</span>:] <span class="hljs-comment"># all dimensions except the batch dimension</span><br>     num_features = <span class="hljs-number">1</span><br>     <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> size:<br>     num_features *= s<br>     <span class="hljs-keyword">return</span> num_features<br>net = Net()<br><span class="hljs-built_in">print</span>(net)<br></code></pre></td></tr></table></figure><h1 id="数据处理和计算"><a href="#数据处理和计算" class="headerlink" title="数据处理和计算"></a>数据处理和计算</h1><h3 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.empty(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<span class="hljs-comment"># 构造5x3的矩阵，不初始化</span><br>x = torch.rand(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<span class="hljs-comment"># 随机初始化</span><br>x = torch.zeros(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, dtype=torch.long)<span class="hljs-comment"># 数据全为0，数据结构为long</span><br>x = torch.tensor([<span class="hljs-number">5.5</span>, <span class="hljs-number">3</span>])<span class="hljs-comment"># 构造张量，直接用数据</span><br>x = torch.randn_like(x, dtype=torch.<span class="hljs-built_in">float</span>)<span class="hljs-comment"># 构建一个基于x tensor的tensor</span><br>x.size()<span class="hljs-comment"># 查看维度</span><br></code></pre></td></tr></table></figure><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><ul><li><p>直接使用**+**号</p></li><li><p>&#96;&#96;&#96;python<br>torch.add(x, y)<br>torch.add(x, y, out&#x3D;result)</p><h1 id="adds-x-to-y，类比使张量发生变化的操作都有前缀"><a href="#adds-x-to-y，类比使张量发生变化的操作都有前缀" class="headerlink" title="adds x to y，类比使张量发生变化的操作都有前缀"></a>adds x to y，类比使张量发生变化的操作都有前缀</h1><p>y.add_(x)</p><h1 id="改变tensor大小或形状"><a href="#改变tensor大小或形状" class="headerlink" title="改变tensor大小或形状"></a>改变tensor大小或形状</h1><p>y &#x3D; x.view(16)<br>z &#x3D; x.view(-1, 8) # the size -1 is inferred from other dimensions(自判)<br>x.item()# 获取tensor的value</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><br><br>### 自动微分<br><br>&gt; 首先要开启跟踪，才可以跟踪计算，最后再调用backward()计算梯度。<br><br>```python<br># 创建一个张量，跟踪计算<br>x = torch.ones(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, requires_grad=<span class="hljs-literal">True</span>)<br># 向后传播<br>out.backward() or out.backward(torch.tensor(<span class="hljs-number">1.</span>))<br># 停止跟踪<br><span class="hljs-keyword">with</span> torch.no_grad()<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>     <span class="hljs-comment"># Max pooling over a (2, 2) window</span><br>     x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>     <span class="hljs-comment"># If the size is a square you can only specify a single number</span><br>     x = F.max_pool2d(F.relu(self.conv2(x)), <span class="hljs-number">2</span>)<br>     x = x.view(-<span class="hljs-number">1</span>, self.num_flat_features(x))<br>     x = F.relu(self.fc1(x))<br>     x = F.relu(self.fc2(x))<br>     x = self.fc3(x)<br>     <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h3 id="返模型参数"><a href="#返模型参数" class="headerlink" title="返模型参数"></a>返模型参数</h3><p>net.parameters()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">params = <span class="hljs-built_in">list</span>(net.parameters())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(params))<br><span class="hljs-built_in">print</span>(params[<span class="hljs-number">0</span>].size()) <span class="hljs-comment"># conv1&#x27;s .weight</span><br></code></pre></td></tr></table></figure><h3 id="随机梯度反向传播"><a href="#随机梯度反向传播" class="headerlink" title="随机梯度反向传播"></a>随机梯度反向传播</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将梯度缓存置零</span><br>net.zero_grad()<br>out.backward(torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br><span class="hljs-comment"># 反向传播损失</span><br>loss.backward()<br></code></pre></td></tr></table></figure><h3 id="更新网络参数"><a href="#更新网络参数" class="headerlink" title="更新网络参数"></a>更新网络参数</h3><ol><li>随机梯度下降</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">weight = weight - learning_rate * gradient<br><span class="hljs-comment"># python实现</span><br>learning_rate = <span class="hljs-number">0.01</span><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> net.parameters():<br> f.data.sub_(f.grad.data * learning_rate)<br><br><span class="hljs-comment"># pytorch实现</span><br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><span class="hljs-comment"># create your optimizer</span><br>optimizer = optim.SGD(net.parameters(), lr=<span class="hljs-number">0.01</span>)<br><span class="hljs-comment"># in your training loop:</span><br>optimizer.zero_grad() <span class="hljs-comment"># zero the gradient buffers</span><br>output = net(<span class="hljs-built_in">input</span>)<br>loss = criterion(output, target)<br>loss.backward()<br>optimizer.step() <span class="hljs-comment"># Does the update</span><br></code></pre></td></tr></table></figure><h3 id="显示图像"><a href="#显示图像" class="headerlink" title="显示图像"></a>显示图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># functions to show an image</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">imshow</span>(<span class="hljs-params">img</span>):<br>    img = img / <span class="hljs-number">2</span> + <span class="hljs-number">0.5</span> <span class="hljs-comment"># unnormalize</span><br>    npimg = img.numpy()<br>    plt.imshow(np.transpose(npimg, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))<br>    plt.show()<br>    <span class="hljs-comment"># get some random training images</span><br>    dataiter = <span class="hljs-built_in">iter</span>(trainloader)<br>    images, labels = dataiter.<span class="hljs-built_in">next</span>()<br>    <span class="hljs-comment"># show images</span><br>    imshow(torchvision.utils.make_grid(images))<br></code></pre></td></tr></table></figure><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><p>不同的数据类型用不同的方法</p><ul><li>对于图像，可以用 Pillow，OpenCV <ul><li>对于视觉，有torchvision包</li></ul></li><li>对于语音，可以用 scipy，librosa </li><li>对于文本，可以直接用 Python 或 Cython 基础数据加载模块，或者用 NLTK 和 SpaCy</li></ul><h3 id="数据加载和归一化处理"><a href="#数据加载和归一化处理" class="headerlink" title="数据加载和归一化处理"></a>数据加载和归一化处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">transform = transforms.Compose(<br> [transforms.ToTensor(), transforms.Normalize((<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>), (<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>))])<br><br>trainset = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&#x27;./data&#x27;</span>, train=<span class="hljs-literal">True</span>,<br> download=<span class="hljs-literal">True</span>, transform=transform)<br><br>trainloader = torch.utils.data.DataLoader(trainset, batch_size=<span class="hljs-number">4</span>,<br> shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">2</span>)<br><br>testset = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&#x27;./data&#x27;</span>, train=<span class="hljs-literal">False</span>,<br> download=<span class="hljs-literal">True</span>, transform=transform)<br><br>testloader = torch.utils.data.DataLoader(testset, batch_size=<span class="hljs-number">4</span>,<br> shuffle=<span class="hljs-literal">False</span>, num_workers=<span class="hljs-number">2</span>)<br><br>classes = (<span class="hljs-string">&#x27;plane&#x27;</span>, <span class="hljs-string">&#x27;car&#x27;</span>, <span class="hljs-string">&#x27;bird&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>,<br> <span class="hljs-string">&#x27;deer&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;frog&#x27;</span>, <span class="hljs-string">&#x27;horse&#x27;</span>, <span class="hljs-string">&#x27;ship&#x27;</span>, <span class="hljs-string">&#x27;truck&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h1><h1 id="LOSS定义"><a href="#LOSS定义" class="headerlink" title="LOSS定义"></a>LOSS定义</h1><h3 id="计算均方误差"><a href="#计算均方误差" class="headerlink" title="计算均方误差"></a>计算均方误差</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">criterion = nn.MSELoss()<br>loss = criterion(output, target)<br></code></pre></td></tr></table></figure><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h3 id="创建一个图像分类器步骤："><a href="#创建一个图像分类器步骤：" class="headerlink" title="创建一个图像分类器步骤："></a>创建一个图像分类器步骤：</h3><ol><li>使用torchvision加载并且归一化CIFAR10的训练和测试数据集</li><li>定义一个卷积神经网络</li><li>定义一个损失函数</li><li>在训练样本数据上训练网络</li><li>在测试样本数据上测试网络</li></ol><h3 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h3><p>3通道的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-built_in">super</span>(Net, self).__init__()<br>     self.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>)<br>     self.pool = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>     self.conv2 = nn.Conv2d(<span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>)<br>     self.fc1 = nn.Linear(<span class="hljs-number">16</span> * <span class="hljs-number">5</span> * <span class="hljs-number">5</span>, <span class="hljs-number">120</span>)<br>     self.fc2 = nn.Linear(<span class="hljs-number">120</span>, <span class="hljs-number">84</span>)<br>     self.fc3 = nn.Linear(<span class="hljs-number">84</span>, <span class="hljs-number">10</span>)<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>     x = self.pool(F.relu(self.conv1(x)))<br>     x = self.pool(F.relu(self.conv2(x)))<br>     x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">16</span> * <span class="hljs-number">5</span> * <span class="hljs-number">5</span>)<br>     x = F.relu(self.fc1(x))<br>     x = F.relu(self.fc2(x))<br>     x = self.fc3(x)<br>     <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h3 id="定义损失函数和优化器"><a href="#定义损失函数和优化器" class="headerlink" title="定义损失函数和优化器"></a>定义损失函数和优化器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br>criterion = nn.CrossEntropyLoss()<br>optimizer = optim.SGD(net.parameters(), lr=<span class="hljs-number">0.001</span>, momentum=<span class="hljs-number">0.9</span>)<br></code></pre></td></tr></table></figure><h3 id="定义迭代循环"><a href="#定义迭代循环" class="headerlink" title="定义迭代循环"></a>定义迭代循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>): <span class="hljs-comment"># loop over the dataset multiple times</span><br>     running_loss = <span class="hljs-number">0.0</span><br>     <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(trainloader, <span class="hljs-number">0</span>):<br>     <span class="hljs-comment"># get the inputs</span><br>     inputs, labels = data<br>     <span class="hljs-comment"># zero the parameter gradients</span><br>     optimizer.zero_grad()<br>     <span class="hljs-comment"># forward + backward + optimize</span><br>     outputs = net(inputs)<br>     loss = criterion(outputs, labels)<br>     loss.backward()<br>     optimizer.step()<br>     <span class="hljs-comment"># print statistics</span><br>     running_loss += loss.item()<br>     <span class="hljs-keyword">if</span> i % <span class="hljs-number">2000</span> == <span class="hljs-number">1999</span>: <span class="hljs-comment"># print every 2000 mini-batches</span><br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%d, %5d] loss: %.3f&#x27;</span> %<br>     (epoch + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, running_loss / <span class="hljs-number">2000</span>))<br>     running_loss = <span class="hljs-number">0.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Finished Training&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关算法</title>
      <link href="/Deep-learning/2023/08/07/deep%20learning/%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
      <url>/Deep-learning/2023/08/07/deep%20learning/%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="动量SGD"><a href="#动量SGD" class="headerlink" title="动量SGD"></a>动量SGD</h2>]]></content>
      
      
      <categories>
          
          <category> Deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFT资料</title>
      <link href="/%E7%AB%9E%E8%B5%9B/2023/08/07/%E7%AB%9E%E8%B5%9B/FFT%E8%B5%84%E6%96%99/"/>
      <url>/%E7%AB%9E%E8%B5%9B/2023/08/07/%E7%AB%9E%E8%B5%9B/FFT%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p>资料</p><span id="more"></span><p><a href="https://blog.csdn.net/qq_42628795/article/details/95314989">基于STM32的FFT频谱分析+波形识别_stm32 绘制不同波形的频谱__鑫鑫鑫_的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/liqiqi/p/14665058.html">几种比较经典的波形及其FFT变换（正弦波，三角波，方波和锯齿波） - 北纬三十度夏至 - 博客园 </a></p><p><a href="https://blog.csdn.net/XM_no_homework/article/details/90154929">时域转频域图</a></p><p><a href="https://blog.csdn.net/qq_34022877/article/details/123190943#comments_27638042">频谱分析</a></p><p><a href="https://www.cnblogs.com/jamesjiang/p/8986632.html">FIR滤波</a></p>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23国电总结</title>
      <link href="/%E6%AF%94%E8%B5%9B/2023/08/07/%E7%AB%9E%E8%B5%9B/23%E5%9B%BD%E7%94%B5%E6%80%BB%E7%BB%93/"/>
      <url>/%E6%AF%94%E8%B5%9B/2023/08/07/%E7%AB%9E%E8%B5%9B/23%E5%9B%BD%E7%94%B5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>国电四天三夜总结</p><span id="more"></span><h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><h3 id="FFT分析"><a href="#FFT分析" class="headerlink" title="FFT分析"></a>FFT分析</h3><h4 id="100K-50K，1V-1V情况"><a href="#100K-50K，1V-1V情况" class="headerlink" title="100K+50K，1V+1V情况"></a>100K+50K，1V+1V情况</h4><p>对于频谱图来说，FFT分析出来，低频的幅值较大，高频的幅值较小</p><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202308021006326.png" alt="image-20230802100659233"></p><h4 id="100K-50K，2V-1V情况"><a href="#100K-50K，2V-1V情况" class="headerlink" title="100K+50K，2V+1V情况"></a>100K+50K，2V+1V情况</h4><p>对于频谱图来说，当把高频的信号的幅值扩大，得出来的频谱图，高频的幅值会大一点。</p><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202308021010737.png" alt="image-20230802101056703"></p><h4 id="实际测试中还出现的问题"><a href="#实际测试中还出现的问题" class="headerlink" title="实际测试中还出现的问题"></a>实际测试中还出现的问题</h4><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202308021435081.png" alt="image-20230802143530997"></p><p>其实也不是什么大问题，就是在后面加判断就行了，我只需要找出两个频率。</p><h3 id="分析出三角波"><a href="#分析出三角波" class="headerlink" title="分析出三角波"></a>分析出三角波</h3><p>。。。很难分析出来</p><h3 id="第一天总结"><a href="#第一天总结" class="headerlink" title="第一天总结"></a>第一天总结</h3><p>两个小时确认选题，认为这道题很简单，我们已经准备得差不多了，但是只有一个难点，因为一开始审错了题，下午问老师才发。所以等到下午想到的时候，模块已经被买完了，其实也不止一个模块就能搞定。要做到不漂移，真的很难，误差小于0.001HZ才能做到。目前两种思路：</p><ul><li>第一种：从原信号中直接滤出来，这样的效果是最好，最真实的，因为都是同一个信号</li><li>第二种：类比闭环控制原理，实现闭环调节，这样让一个新产生的信号无限接近原始信号。</li></ul><h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><h3 id="确认方案，负反馈"><a href="#确认方案，负反馈" class="headerlink" title="确认方案，负反馈"></a>确认方案，负反馈</h3><p>中午确认方案，开始制作。采用方案二，与从原信号中获取反馈相，把信号源输出当作是零误差，采用FFT计算出来然后取整，使得</p><p>目前思路：</p><pre><code class=" mermaid">graph TB混合信号--&gt;加法器--&gt;FFT--&gt;分析出频率--&gt;A(驱动DDS输出)--&gt;过零比较器--&gt;输入捕获测出频率--&gt;PID--&gt;A</code></pre><p>测的过程中，发现DDS精度不够，最小分度值只能设1HZ，所以就算是经过了PID，也是实现不了，最终放弃方案。</p><p>最后发现，直接用DDS其实误差也不是很大，还算看得过去，就这样吧。</p><h3 id="另一种分离信号方式"><a href="#另一种分离信号方式" class="headerlink" title="另一种分离信号方式"></a>另一种分离信号方式</h3><blockquote><p>除了FFT之外的信号分离方法</p></blockquote><p>当分度值为10KHZ的时候，且B&gt;A，可以将各种混合信号通过过零比较器，算出最终的频率或者占空比，用枚举的方法来判断是哪种情况（这样的前提是，两两混合没有情况一样的时候）</p><h3 id="第二天总结"><a href="#第二天总结" class="headerlink" title="第二天总结"></a>第二天总结</h3><ul><li>因为DDS的精度不够准确，就算反馈回来算出来差了0.1HZ根本调不了</li><li>最后只能用最原始的方案了，误差大就大吧</li><li>到了晚上，软件已经写好，可以正常调试了。接下来等硬件队友搭电路</li></ul><h1 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h1><p><a href="https://blog.csdn.net/Fraay/article/details/108687441">电赛准备DDS &amp; AD9910模块数据手册、使用方法详解_ad9910控制profile1</a></p><ul><li>软件部分测试的代码基本没有问题</li><li>等待硬件电路搭出来</li></ul><p>移植串口屏的时候，忘记了串口屏的波特率是9600，想了半天，真的服了。</p><p>接下来基本已经确定是按照一开始的方法去做，误差大就大吧。</p><h3 id="作品完成度"><a href="#作品完成度" class="headerlink" title="作品完成度"></a>作品完成度</h3><p>硬件队友对于第二个基本要求，做出了硬件方案，对于50KHZ和100KHZ的信号，采用硬件滤波的方式，过滤出了，并且做到了完全不漂移。</p><p>在晚上第一次上电，软件部分已经完全写完。并且开始调试，一切正常。接下来，我们还是不满意，想冲以下发挥部分，做到识别出三角波。然后从直接通宵到了第四天。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​就是感觉一开始就实现不了，所以就没有开始分析三角波，太过于相信自己的实力，以及对问题理解不清晰，所以一直拖。等到队友能实现的时候，再去做三角波分析，已经来不及了。</p><h1 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h1><p>​从第三天一直通宵到第四天早上，还是没能分析出三角波。一直找不出对应关系，网上说的，师兄说的方法，都不能实现。到了早上的时候，发现频谱还溢出了，根本看不了三次谐波。</p><p>​赛后师兄说了一个方法，只要二次采集就能分析出三次谐波，但理论上好像也是不太行。这就不知道了。</p><p>如果一开始就在分析三角波的路上，而不是去搞其它的，无聊到去焊LED灯，也许有可能做得出来。</p><p>​最后下午，队友已经把作品给固定好，全部再调试一遍。出现了很多奇奇怪怪的问题，比如说<strong>没上电</strong>还怀疑是我软件问题，DDS没有输出，也是怀疑我软件问题，结果还是<strong>没上电</strong>，真是醉了。最后就是把发挥部分的分析分度值为5KHZ的要求写上去了。</p><p>​</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>​总是很相信自己的实力，以为很快就能实现，所以一直都没去做。到了最后面，发现很多问题，都是实现不了的，就很难搞。还有报告书，也应该一开始就搞的，到了第四天下午开始搞，一堆问题，什么都错，甚至连打印都差点没时间了。</p><p>​就这样吧，大一抱着学习的心态去打比赛，最后一场也打完了。感觉学到了很多，又好像什么都没学到。主要是备赛阶段学到很多，比赛过程主要是暴露问题，还有想方案，最后就是发现问题和解决问题的能力。</p><ul><li>比赛过程中的任务分配问题，还有时间规划问题。</li><li>仪表信号题主要就是对信号的分析<ul><li>最基础的ADC，DAC</li><li>定时器输入捕获</li><li>FFT计算</li><li>频率、幅度、相位差</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国电 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5踩坑之旅</title>
      <link href="/Deep-learning/2023/07/21/deep%20learning/yolov5%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/"/>
      <url>/Deep-learning/2023/07/21/deep%20learning/yolov5%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p>在别的地方没搬运过来 </p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h1 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h1><p>gpu训练0.044hours</p><p>cup训练0.381</p>]]></content>
      
      
      <categories>
          
          <category> Deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yolo </tag>
            
            <tag> 视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32之ADC+DMA</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/07/18/%E5%8D%95%E7%89%87%E6%9C%BA/stm32%E4%B9%8BADC-DMA/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/07/18/%E5%8D%95%E7%89%87%E6%9C%BA/stm32%E4%B9%8BADC-DMA/</url>
      
        <content type="html"><![CDATA[<p>ADC 介绍、使用</p><span id="more"></span><h1 id="ADC介绍"><a href="#ADC介绍" class="headerlink" title="ADC介绍"></a>ADC介绍</h1><h1 id="相关参数计算"><a href="#相关参数计算" class="headerlink" title="相关参数计算"></a>相关参数计算</h1><h1 id="ADC-DMA"><a href="#ADC-DMA" class="headerlink" title="ADC+DMA"></a>ADC+DMA</h1><h2 id="cubemx配置"><a href="#cubemx配置" class="headerlink" title="cubemx配置"></a>cubemx配置</h2><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202307181644326.png" alt="image-20230718164408198"></p><p>Scan conversion mode  扫描转换模式</p><p>Continuous Conversion Mode  连续转换模式</p><p>DMA  Continuous Requests  DMA  连续请求</p><h1 id="ADC-DMA-TIM"><a href="#ADC-DMA-TIM" class="headerlink" title="ADC+DMA+TIM"></a>ADC+DMA+TIM</h1><ul><li>采样率可控</li></ul><h2 id="采样率计算"><a href="#采样率计算" class="headerlink" title="采样率计算"></a>采样率计算</h2><blockquote><p>定时器时钟周期&#x2F;PSC+ARR</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>ADC配置<br>选择定时器触发事件</p><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202309160047297.png" alt="image-20230916004739196"></p></li><li><p>TIM配置<br>定时器配置，选择更新事件</p><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202309160049381.png" alt="image-20230916004930326"></p></li><li><p>代码编写部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// while里面</span><br>HAL_ADC_Start(&amp;hadc1);<br>HAL_ADC_Start_DMA(&amp;hadc1, (<span class="hljs-type">uint32_t</span> *) adc_buffer, LENGTH);<br>HAL_TIM_Base_Start(&amp;htim3);<br><span class="hljs-keyword">while</span> (!dma_end);<br>dma_end = <span class="hljs-number">0</span>;<br>HAL_ADC_Stop(&amp;hadc1);<br><br><span class="hljs-comment">// 中断文件里面</span><br><span class="hljs-comment">// 放在 void DMA2_Stream0_IRQHandler(void) 这个里面</span><br><span class="hljs-keyword">if</span> (__HAL_DMA_GET_IT_SOURCE(&amp;hdma_adc1, DMA_IT_TC) == RESET) &#123;<br>    dma_end = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://aijishu.com/a/1060000000312731#item-1">ADC++TIM+DMA</a></p><p><a href="https://blog.csdn.net/dongxiaodongvip/article/details/114498855">ADC</a></p><p><a href="https://blog.csdn.net/black0591/article/details/103187450">ADC相关计算</a></p><p><a href="%5Bstm32%E7%9A%84TIM%E5%AE%9A%E6%97%B6%E5%99%A8HAL%E5%BA%93%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8_hal_tim_base_start_mg_hover%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/mg_hover/article/details/96834177)">TIM</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> ADC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喵提醒</title>
      <link href="/%E5%B7%A5%E5%85%B7/2023/07/15/%E5%85%B6%E5%AE%83/%E5%96%B5%E6%8F%90%E9%86%92/"/>
      <url>/%E5%B7%A5%E5%85%B7/2023/07/15/%E5%85%B6%E5%AE%83/%E5%96%B5%E6%8F%90%E9%86%92/</url>
      
        <content type="html"><![CDATA[<p>微信公众号提醒工具</p><span id="more"></span><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202307151730014.png" alt="image-20230715173012950"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion进行Qt6开发</title>
      <link href="/Qt/2023/06/08/Qt/Clion%E8%BF%9B%E8%A1%8CQt6%E5%BC%80%E5%8F%91/"/>
      <url>/Qt/2023/06/08/Qt/Clion%E8%BF%9B%E8%A1%8CQt6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>内部资料</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clion </tag>
            
            <tag> Qt6 </tag>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 添加DSP库</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/05/19/%E5%8D%95%E7%89%87%E6%9C%BA/STM32-%E6%B7%BB%E5%8A%A0DSP%E5%BA%93/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/05/19/%E5%8D%95%E7%89%87%E6%9C%BA/STM32-%E6%B7%BB%E5%8A%A0DSP%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>stm32添加DSP库，实现FFT</p><span id="more"></span><p><a href="https://blog.csdn.net/qq_34022877/article/details/117855263">stm32cubemx</a></p><p>更改cmake</p><p>去掉注释中的硬件浮点数</p><p>还有加上下面这个代码</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMAKE"><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>.elf <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/Middlewares/ST/ARM/DSP/Lib/libarm_cortexM4lf_math.a)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国电 </tag>
            
            <tag> Stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言操作Excel</title>
      <link href="/C/2023/05/19/%E5%90%84%E7%A7%8D%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9CExcel/"/>
      <url>/C/2023/05/19/%E5%90%84%E7%A7%8D%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9CExcel/</url>
      
        <content type="html"><![CDATA[<p>引用第三方库<a href="https://www.libxl.com/download.html">libxls</a>实现C语言操作Excel</p><span id="more"></span><h1 id="libxls"><a href="#libxls" class="headerlink" title="libxls"></a>libxls</h1><blockquote><p>官网描述</p></blockquote><p>LibXL is a library that can read and write Excel files. It doesn’t require Microsoft Excel and .NET framework, combines an easy to use and powerful features. Library can be used to</p><ul><li>Generate a new spreadsheet from scratch</li><li>Extract data from an existing spreadsheet</li><li>Edit an existing spreadsheet</li></ul><p>LibXL can help your applications in exporting and extracting data to&#x2F;from Excel files with minimum effort. Also it can be used as report engine. Library can be used in C, C++, C#, Delphi, PHP, Python, PowerBASIC, Xojo, Fortran and other languages. Supports Excel 97-2003 binary formats (xls), Excel 2007-2021 XML formats (xlsx&#x2F;xlsm). Supports Unicode and 64-bit platforms. There are a wrapper for .NET developers and separate Linux, Mac and iOS editions. See features of the library in <a href="https://www.libxl.com/examples/demo.xls">demo.xls</a> or <a href="https://www.libxl.com/examples/demo.xlsx">demo.xlsx</a> files.</p><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><blockquote><p>官方原文版</p></blockquote><p>LibXL is a library for direct reading and writing Excel files.</p><p>Package contents:</p><p>  bin              32-bit dynamic library (libxl.dll)<br>  bin64            64-bit dynamic library (libxl.dll)<br>  bin64_32         the same libraries with different names for 32-bit and 64-bit (can be used in the same folder)<br>  binarm64         ARM64 dynamic library (libxl.dll)<br>  doc              C++ documentation<br>  examples         C, C++, C#, Delphi and Fortran examples (MinGW, Visual Studio, Qt, Code::Blocks)<br>  include_c        headers for C<br>  include_cpp      headers for C++<br>  lib              Microsoft Visual C++ 32-bit import library for libxl.dll in the bin folder<br>  lib64            Microsoft Visual C++ 64-bit import library for libxl.dll in the bin64 folder<br>  lib64_32         the import libraries for dynamic libraries libxl32.dll and libxl64.dll from the bin64_32 folder<br>  libarm64         Microsoft Visual C++ ARM64 import library for libxl.dll in the binarm64 folder<br>  net              .NET wrapper (assembly)<br>  php              compiled plug-in for PHP<br>  stdcall          32-bit dynamic library with the stdcall calling convention<br>  changelog.txt    version history<br>  libxl.url        link to home page<br>  license.txt      end-user license agreement<br>  readme.txt       this file</p><p>Using library:</p><ol><li><p>Microsoft Visual C++</p><ul><li><p>add include directory in your project, for example: c:\libxl\include_cpp</p><p>Project -&gt; Properties -&gt; C&#x2F;C++ -&gt; General -&gt; Additional Include Directories</p></li><li><p>add library directory in your project, for example: c:\libxl\lib</p><p>Project -&gt; Properties -&gt; Linker -&gt; General -&gt; Additional Library Directories</p></li><li><p>add libxl.lib in project dependencies:</p><p>Project -&gt; Properties -&gt; Linker -&gt; Input -&gt; Additional Dependencies</p></li><li><p>copy bin\libxl.dll to directory of your project</p></li></ul></li><li><p>MinGW</p><p>Type in examples&#x2F;c++&#x2F;mingw directory:</p><p>  g++ generate.cpp -o generate -I..&#x2F;..&#x2F;..&#x2F;include_cpp -L..&#x2F;..&#x2F;..&#x2F;bin -lxl</p><p>Use mingw32-make for building examples.</p></li><li><p>C# and other .NET languages</p><p>Use assembly libxl.net.dll in net directory: Project -&gt; Add reference… -&gt; Browse</p><p>Also copy bin\libxl.dll to Debug or Release directory of your project.</p></li><li><p>Qt</p><ul><li><p>add the following lines to a configuration file (.pro):</p><p>INCLUDEPATH &#x3D; c:&#x2F;libxl-3.6.4.0&#x2F;include_cpp<br>LIBS +&#x3D; c:&#x2F;libxl-3.6.4.0&#x2F;lib&#x2F;libxl.lib</p></li><li><p>copy bin\libxl.dll to the build directory of your project</p></li></ul></li><li><p>Borland C++ and Embarcadero C++ Builder</p><ul><li><p>create an import library for your compiler:</p><p>  implib -a libxl.lib libxl.dll</p></li><li><p>add the include directory to your project, for example: c:\libxl-3.9.1.0\include_cpp</p><p>Project -&gt; Options -&gt; Building -&gt; C++ Compiler -&gt; Directories and Conditionals -&gt; Include file search path</p><p>or </p><p>Project -&gt; Options -&gt; Directories&#x2F;Conditionals -&gt; Include path (for old C++ Bulder versions)</p></li><li><p>add library directory to your project (only for old C++ Builder versions)</p><p>Project -&gt; Options -&gt; Directories&#x2F;Conditionals -&gt; Library path</p></li><li><p>add libxl.lib to your project</p><p>Project -&gt; Add to Project…</p></li><li><p>copy libxl.dll from the bin folder to <your_project_directory>&#x2F;Win32&#x2F;Debug or <your_project_directory>&#x2F;Win32&#x2F;Release folder</p><p>If your target is “Windows 64-bit” copy libxl.dll from the bin64 folder.</p></li></ul></li><li><p>Delphi</p><ul><li><p>add the directory with the LibXL.pas unit, for example: c:\libxl-3.9.1.0\examples\delphi12</p><p>Project -&gt; Options -&gt; Building -&gt; Delphi Compiler -&gt; Search path</p></li><li><p>copy libxl.dll from the bin folder to <your_project_directory>\Win32\Debug or <your_project_directory>\Win32\Release folder</p></li></ul></li></ol><p>Documentation:</p><p>  <a href="http://www.libxl.com/doc">http://www.libxl.com/doc</a></p><p>Contact:</p><p>  <a href="mailto:&#115;&#117;&#112;&#112;&#x6f;&#114;&#116;&#x40;&#x6c;&#105;&#98;&#x78;&#108;&#46;&#99;&#111;&#109;">&#115;&#117;&#112;&#112;&#x6f;&#114;&#116;&#x40;&#x6c;&#105;&#98;&#x78;&#108;&#46;&#99;&#111;&#109;</a></p><h2 id="VS简化版"><a href="#VS简化版" class="headerlink" title="VS简化版"></a>VS简化版</h2><ul><li><p>把 <strong>\libxl\include_cpp</strong> 文件添加到 P<strong>roject -&gt; Properties -&gt; C&#x2F;C++ -&gt; General -&gt; Additional Include Directories</strong></p></li><li><p>把 <strong>\libxl\lib</strong> 文件添加到 <strong>Project -&gt; Properties -&gt; Linker -&gt; General -&gt; Additional Library Directories</strong></p></li><li><p>添加 <strong>libxl.lib</strong> 文件到 <strong>Project -&gt; Properties -&gt; Linker -&gt; Input -&gt; Additional Dependencies</strong></p></li><li><p>复制 <strong>bin\libxl.dll</strong> 到项目路径下</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个模型分析Titanic数据集</title>
      <link href="/Deep-learning/2023/05/14/deep%20learning/stage/"/>
      <url>/Deep-learning/2023/05/14/deep%20learning/stage/</url>
      
        <content type="html"><![CDATA[<p>用Random Forest 和 Logistic Regression 两个模型来分析Titanic数据集</p><span id="more"></span><h1 id="Random-Forest"><a href="#Random-Forest" class="headerlink" title="Random Forest"></a>Random Forest</h1><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <span class="hljs-comment"># linear algebra</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd <span class="hljs-comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span><br><span class="hljs-comment"># 使用决策树，随机森林模型</span><br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><br><span class="hljs-comment"># 训练数据</span><br>train_data = pd.read_csv(<span class="hljs-string">&quot;Input/titanic/train.csv&quot;</span>)<br><span class="hljs-comment"># print(train_data.head().isnull().sum())       # 检测是否有缺失数据</span><br><br><span class="hljs-comment"># 测试数据</span><br>test_data = pd.read_csv(<span class="hljs-string">&quot;Input/titanic/test.csv&quot;</span>)<br><span class="hljs-comment"># test_data.head()</span><br><br><span class="hljs-comment"># 选出男女的存活人数</span><br>women = train_data.loc[train_data.Sex == <span class="hljs-string">&#x27;female&#x27;</span>][<span class="hljs-string">&quot;Survived&quot;</span>]<br>men = train_data.loc[train_data.Sex == <span class="hljs-string">&#x27;male&#x27;</span>][<span class="hljs-string">&quot;Survived&quot;</span>]<br><br><span class="hljs-comment"># print(men)</span><br>rate_men = <span class="hljs-built_in">sum</span>(men)/<span class="hljs-built_in">len</span>(men)           <span class="hljs-comment"># 计算男人存活的概率</span><br><span class="hljs-comment"># print(women)</span><br>rate_women = <span class="hljs-built_in">sum</span>(women)/<span class="hljs-built_in">len</span>(women)      <span class="hljs-comment"># 计算女人存活的概率</span><br><br><span class="hljs-comment"># print(&quot;% of women who survived:&quot;, rate_women)</span><br><span class="hljs-comment"># print(&quot;% of men who survived:&quot;, rate_men)</span><br><br>y = train_data[<span class="hljs-string">&quot;Survived&quot;</span>]<br><span class="hljs-comment"># print(y)</span><br><br><span class="hljs-comment"># 这里有四个feature</span><br>features = [<span class="hljs-string">&quot;Pclass&quot;</span>, <span class="hljs-string">&quot;Sex&quot;</span>, <span class="hljs-string">&quot;SibSp&quot;</span>, <span class="hljs-string">&quot;Parch&quot;</span>]<br><br><span class="hljs-comment"># 使用on hot encode方法，将数据中的文字转化为数字</span><br><span class="hljs-comment"># print(train_data[features].head(10))</span><br>X = pd.get_dummies(train_data[features])<br><span class="hljs-built_in">print</span>(X.head(<span class="hljs-number">10</span>))<br><br><span class="hljs-comment"># 获得测试数据中四个feature的数据</span><br>X_test = pd.get_dummies(test_data[features])<br><br><span class="hljs-comment"># 开始训练模型</span><br><span class="hljs-comment"># 初始化模型的超参数</span><br>model = RandomForestClassifier(n_estimators=<span class="hljs-number">100</span>, max_depth=<span class="hljs-number">5</span>, random_state=<span class="hljs-number">1</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n_estimators：这个参数指定了随机森林中决策树的数量（默认值为100）。更多的决策树可以提高模型的稳定性和准确性，但同时也会增加计算开销。</span><br><span class="hljs-string"></span><br><span class="hljs-string">max_depth：这个参数指定了每棵决策树的最大深度（默认值为None）。限制决策树的深度可以防止过拟合，但如果设置得太小，模型可能无法捕捉到复杂的关系。</span><br><span class="hljs-string"></span><br><span class="hljs-string">random_state：这个参数控制随机性的种子（默认值为None）。设置random_state可以使得每次运行模型时得到相同的结果，便于结果的复现性。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 四个features</span><br>model.fit(X, y)<br><br><span class="hljs-comment"># 模型训练完毕，预测测试数据中的结果</span><br>predictions = model.predict(X_test)<br><br><span class="hljs-comment"># 输出结果</span><br>output = pd.DataFrame(&#123;<span class="hljs-string">&#x27;PassengerId&#x27;</span>: test_data.PassengerId, <span class="hljs-string">&#x27;Survived&#x27;</span>: predictions&#125;)<br>output.to_csv(<span class="hljs-string">&#x27;submission_randomforest.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your submission was successfully saved!&quot;</span>)<br><br><br></code></pre></td></tr></table></figure><h1 id="Logic-Regression（softmax）"><a href="#Logic-Regression（softmax）" class="headerlink" title="Logic Regression（softmax）"></a>Logic Regression（softmax）</h1><h2 id="说说softmax-Regression和Logic-Regression-的区别"><a href="#说说softmax-Regression和Logic-Regression-的区别" class="headerlink" title="说说softmax Regression和Logic Regression 的区别"></a>说说softmax Regression和Logic Regression 的区别</h2><blockquote><p>逻辑回归是一种二分类模型，而Softmax回归是一种多分类模型。当类别数为2时，Softmax回归就是逻辑回归。</p></blockquote><p>Softmax回归（Softmax Regression）和逻辑回归（Logistic Regression）是在某种程度上相似，但并不完全相同。</p><p>逻辑回归是一种用于解决二分类问题的线性模型。它使用sigmoid函数将输入映射到0和1之间的概率值，并根据设定的阈值进行分类。逻辑回归可以看作是一种特殊情况下的Softmax回归，当只有两个类别时，Softmax回归即为逻辑回归。</p><p>而Softmax回归是一种用于多分类问题的模型。它通过对输入样本进行线性变换，然后使用Softmax函数将线性变换后的值转换为表示各个类别概率的向量。Softmax函数将每个类别的概率归一化，使其总和为1。然后根据最高概率所对应的类别进行分类。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <span class="hljs-comment"># linear algebra</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd <span class="hljs-comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span><br><span class="hljs-comment"># 使用逻辑回归模型</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><br><span class="hljs-comment"># 训练数据</span><br>train_data = pd.read_csv(<span class="hljs-string">&quot;Input/titanic/train.csv&quot;</span>)<br><span class="hljs-comment"># print(train_data.head().isnull().sum())       # 检测是否有缺失数据</span><br><br><span class="hljs-comment"># 测试数据</span><br>test_data = pd.read_csv(<span class="hljs-string">&quot;Input/titanic/test.csv&quot;</span>)<br><span class="hljs-comment"># test_data.head()</span><br><br><span class="hljs-comment"># 选出男女的存活人数</span><br>women = train_data.loc[train_data.Sex == <span class="hljs-string">&#x27;female&#x27;</span>][<span class="hljs-string">&quot;Survived&quot;</span>]<br>men = train_data.loc[train_data.Sex == <span class="hljs-string">&#x27;male&#x27;</span>][<span class="hljs-string">&quot;Survived&quot;</span>]<br><br>rate_men = <span class="hljs-built_in">sum</span>(men) / <span class="hljs-built_in">len</span>(men)  <span class="hljs-comment"># 计算男人存活的概率</span><br>rate_women = <span class="hljs-built_in">sum</span>(women) / <span class="hljs-built_in">len</span>(women)  <span class="hljs-comment"># 计算女人存活的概率</span><br><br>y = train_data[<span class="hljs-string">&quot;Survived&quot;</span>]<br>features = [<span class="hljs-string">&quot;Pclass&quot;</span>, <span class="hljs-string">&quot;Sex&quot;</span>, <span class="hljs-string">&quot;SibSp&quot;</span>, <span class="hljs-string">&quot;Parch&quot;</span>]<br><br>X = pd.get_dummies(train_data[features])<br>X_test = pd.get_dummies(test_data[features])<br><br><span class="hljs-comment"># 初始化逻辑回归模型</span><br>model = LogisticRegression()<br><br>model.fit(X, y)<br><br>predictions = model.predict(X_test)<br><br>output = pd.DataFrame(&#123;<span class="hljs-string">&#x27;PassengerId&#x27;</span>: test_data.PassengerId, <span class="hljs-string">&#x27;Survived&#x27;</span>: predictions&#125;)<br>output.to_csv(<span class="hljs-string">&#x27;submission_logic.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your submission was successfully saved!&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QTablewidget使用</title>
      <link href="/Qt/2023/05/14/Qt/QTablewidget%E4%BD%BF%E7%94%A8/"/>
      <url>/Qt/2023/05/14/Qt/QTablewidget%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>QTablewidget的各种使用方法</p><span id="more"></span><h1 id="隐藏行列"><a href="#隐藏行列" class="headerlink" title="隐藏行列"></a>隐藏行列</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 隐藏列</span><br>ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setColumnHidden</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 隐藏第一列</span><br>ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setColumnHidden</span>(<span class="hljs-number">2</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 隐藏第三列</span><br><br><span class="hljs-comment">// 隐藏行</span><br>ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setRowHidden</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 隐藏第一行</span><br>ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setRowHidden</span>(<span class="hljs-number">2</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 隐藏第三行</span><br><br><span class="hljs-comment">// 显示列</span><br>ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setColumnHidden</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// 显示第一列</span><br>ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setColumnHidden</span>(<span class="hljs-number">2</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// 显示第三列</span><br><br><span class="hljs-comment">// 显示行</span><br>ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setRowHidden</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// 显示第一行</span><br>ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setRowHidden</span>(<span class="hljs-number">2</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// 显示第三行</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QCustomplot中X轴的操作</title>
      <link href="/Qt/2023/05/10/Qt/QCustomplot%E4%B8%ADX%E8%BD%B4%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/Qt/2023/05/10/Qt/QCustomplot%E4%B8%ADX%E8%BD%B4%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>​QCustomplot的坐标轴操作，图像缩放问题。</p><span id="more"></span><h1 id="关于我找错方向，测试了一晚的代码"><a href="#关于我找错方向，测试了一晚的代码" class="headerlink" title="关于我找错方向，测试了一晚的代码"></a>关于我找错方向，测试了一晚的代码</h1><blockquote><p>这个是关于图像放缩的代码，具体看注释</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// key是x轴，value是y轴</span><br><br><span class="hljs-type">double</span> currentRangeLower = ui_chart_-&gt;widget-&gt;xAxis-&gt;<span class="hljs-built_in">range</span>().lower;<br><span class="hljs-type">double</span> currentRangeUpper = ui_chart_-&gt;widget-&gt;xAxis-&gt;<span class="hljs-built_in">range</span>().upper;<br><span class="hljs-type">double</span> newRangeLower = data_pool_[i].data_list[i].time - <span class="hljs-number">30</span>;<br><span class="hljs-type">double</span> newRangeUpper = data_pool_[i].data_list[i].time;<br><br><span class="hljs-comment">// 移动 x 轴范围</span><br>ui_chart_-&gt;widget-&gt;xAxis-&gt;<span class="hljs-built_in">moveRange</span>(newRangeLower - currentRangeLower, newRangeUpper - currentRangeUpper);<br><br><span class="hljs-comment">// 图像的首尾都确定</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(<span class="hljs-number">0</span>)-&gt;<span class="hljs-built_in">rescaleAxes</span>();    <br><br><span class="hljs-comment">// 改成了任意图像，没测试环境，不知是否有问题</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleAxes</span>(<span class="hljs-literal">true</span>);          <br><br> <span class="hljs-comment">// y轴不变，x轴始终首尾显示</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleKeyAxis</span>(<span class="hljs-literal">false</span>); <br><br><span class="hljs-comment">// y轴不动，不断地压缩图像，显示尾点</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleKeyAxis</span>(<span class="hljs-literal">true</span>);     <br><br> <span class="hljs-comment">// x轴不变，y轴始终显示最大最小，</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleValueAxis</span>(rolling_flag);    <br><br><span class="hljs-comment">// 好像区别不大</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleValueAxis</span>(<span class="hljs-literal">true</span>);     <br><br> <span class="hljs-comment">// 和下面一样</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleValueAxis</span>(<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>);    <br><br> <span class="hljs-comment">// x轴不变，y轴始终显示最大最小，而且都贴着边轴</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleValueAxis</span>(<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>);      <br><br> <span class="hljs-comment">// 和下面一样</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleValueAxis</span>(<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>);      <br><br><span class="hljs-comment">// x轴不变，y始终显示最大最小，不过缩放的是轴，图像没关系</span><br>custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleValueAxis</span>(<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>);        <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt右键菜单</title>
      <link href="/Qt/2023/05/10/Qt/Qt%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
      <url>/Qt/2023/05/10/Qt/Qt%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>自定义qt右键菜单</p><span id="more"></span><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>​QTextedit是 自带右键菜单的，如果要自己增加的话，会把原来的功能整的不能使用。</p><h1 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 图表右键菜单</span><br>    ui_chart_-&gt;widget-&gt;<span class="hljs-built_in">setContextMenuPolicy</span>(Qt::CustomContextMenu);<br>    <span class="hljs-built_in">connect</span>(ui_chart_-&gt;widget, &amp;QWidget::customContextMenuRequested, <span class="hljs-keyword">this</span>, [&amp;](<span class="hljs-type">const</span> QPoint pos) &#123;<br><br>      QMenu *menu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMenu</span>(ui_chart_-&gt;widget);<br>      QAction *run = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-string">&quot;开启滚动&quot;</span>, ui_chart_-&gt;widget);<br>      QAction *stop = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-string">&quot;停止滚动&quot;</span>, ui_chart_-&gt;widget);<br>      <span class="hljs-built_in">connect</span>(run, &amp;QAction::triggered, <span class="hljs-keyword">this</span>, [&amp;] &#123;<br>        <span class="hljs-comment">//怎么让它滚动</span><br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;run()&quot;</span>;<br><br>      &#125;);<br>      <span class="hljs-built_in">connect</span>(stop, &amp;QAction::triggered, <span class="hljs-keyword">this</span>, [&amp;] &#123;<br>        <span class="hljs-comment">//默认是不滚动的</span><br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;stop()&quot;</span>;<br><br>      &#125;);<br>      menu-&gt;<span class="hljs-built_in">addAction</span>(run);<br>      menu-&gt;<span class="hljs-built_in">addAction</span>(stop);<br>      menu-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-built_in">cursor</span>().<span class="hljs-built_in">pos</span>());<br>      menu-&gt;<span class="hljs-built_in">show</span>();<br></code></pre></td></tr></table></figure><h1 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++">QMenu *menu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMenu</span>(ui_chart_-&gt;widget);<br><br>      QCheckBox *control = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QCheckBox</span>(<span class="hljs-string">&quot;是否滚动&quot;</span>,ui_chart_-&gt;widget);<br>      rolling_flag==<span class="hljs-literal">true</span> ? control-&gt;<span class="hljs-built_in">setCheckState</span>(Qt::Checked) : control-&gt;<span class="hljs-built_in">setCheckState</span>(Qt::Unchecked);         <span class="hljs-comment">// 设置选择框的默认状态</span><br>      QWidgetAction *choice = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QWidgetAction</span>(ui_chart_-&gt;widget);<br>      choice-&gt;<span class="hljs-built_in">setDefaultWidget</span>(control);                                       <span class="hljs-comment">// 在Action对象中添加控件</span><br><br>      QAction *restore = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-string">&quot;自动&quot;</span>, ui_chart_-&gt;widget);<br>      <span class="hljs-built_in">connect</span>(control, &amp;QCheckBox::stateChanged, <span class="hljs-keyword">this</span>, [&amp;,<span class="hljs-keyword">this</span>](<span class="hljs-type">int</span> state) &#123;<br>        state==Qt::Checked ? rolling_flag = <span class="hljs-literal">true</span> : rolling_flag = <span class="hljs-literal">false</span>;        <span class="hljs-comment">// 设置是否滚动</span><br>      &#125;);<br><br>      <span class="hljs-built_in">connect</span>(restore, &amp;QAction::triggered, <span class="hljs-keyword">this</span>, [&amp;] &#123;<br>        <span class="hljs-comment">//默认是不滚动的</span><br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;auto()&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; data_pool_.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            custom_plot_-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">rescaleAxes</span>();              <span class="hljs-comment">// 自动调整图像，首尾点都显示出来</span><br>        &#125;<br><br>      &#125;);<br>      menu-&gt;<span class="hljs-built_in">addAction</span>(choice);<br>      menu-&gt;<span class="hljs-built_in">addAction</span>(restore);<br>      menu-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-built_in">cursor</span>().<span class="hljs-built_in">pos</span>());           <span class="hljs-comment">// 这是什么？</span><br>      menu-&gt;<span class="hljs-built_in">show</span>();<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>d2l环境配置</title>
      <link href="/Deep-learning/2023/04/22/deep%20learning/d2l%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/Deep-learning/2023/04/22/deep%20learning/d2l%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>  在win11平台上部署d2l测试环境的步骤，以及遇到的问题。</p><span id="more"></span><h2 id="NVIDIA显卡，安装CUBA"><a href="#NVIDIA显卡，安装CUBA" class="headerlink" title="NVIDIA显卡，安装CUBA"></a>NVIDIA显卡，安装CUBA</h2><p>​到NVIDIA官网，跟着安装提示装就行了。<a href="https://developer.nvidia.com/cuda-downloads">CUBA</a></p><p>Cuda安装也有很多报错。。。</p><h3 id="Warnning："><a href="#Warnning：" class="headerlink" title="Warnning："></a>Warnning：</h3><p>​<strong>cuda</strong>的版本要对应pytorch（GPU版），所以一定要选好再装。<strong>cuda</strong>版本也要和<strong>cunn</strong>的版本对应。</p><p><strong>nvcc –version</strong>查看已安装的cuda的版本。</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>​与普通软件卸载方式相同，在程序那里找CUDA的程序卸载，再清理注册表的垃圾。</p><h2 id="Miniconda"><a href="#Miniconda" class="headerlink" title="Miniconda"></a>Miniconda</h2><ol><li><p>先到 <a href="https://conda.io/en/latest/miniconda.html#other-resources">官网</a> 下载对应的版本，按照提示安装好就行。</p></li><li><p>以管理员身份打开 Anaconda Prompt , Warnning: 以管理员身份运行，全装C盘了。。。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --name d2l python=3.9 -y<br></code></pre></td></tr></table></figure></li></ol><p>​<a href="https://imgse.com/i/p9VbL24"><img src="https://s1.ax1x.com/2023/04/22/p9VbL24.png" alt="p9VbL24.png"></a></p><ol start="3"><li>安装Pytorch （这里安装的是cpu版）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install torch==1.12.0<br>pip install torchvision==0.13.0<br></code></pre></td></tr></table></figure><ol start="4"><li>删除</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">直接删除就行</span><br>pip uninstall torch<br>pip uninstall torchvision<br></code></pre></td></tr></table></figure><ol start="4"><li>安装d2l包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install d2l==0.17.6<br></code></pre></td></tr></table></figure><ol start="5"><li><p>离线下载</p><ol><li><p><a href="https://download.pytorch.org/whl/torch_stable.html">官网</a></p></li><li><p>找到对应的CUDA的版本，torch，torchvision，torchaudio的whl文件，然后进行离线安装</p></li><li><p>&#96;&#96;&#96;shell<br>pip install *.whl# 直接把这部分安装</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs golo"><br>* 相关命令<br><br>* pip <span class="hljs-keyword">list</span>    --查看已经安装好的库<br><br>  ```python<br>  <span class="hljs-keyword">import</span> torch<br>  <span class="hljs-keyword">print</span>(torch.__version__)<span class="hljs-comment"># 查看torch版本</span><br>  <span class="hljs-keyword">print</span>(torch.version.cuda)<span class="hljs-comment"># 查看cuda版本</span><br>  <span class="hljs-keyword">print</span>(torch.backends.cudnn.version())<span class="hljs-comment"># 查看cudnn版本</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="conda命令不能在普通的powershell中使用"><a href="#conda命令不能在普通的powershell中使用" class="headerlink" title="conda命令不能在普通的powershell中使用"></a>conda命令不能在普通的<em>powershell</em>中使用</h3><p>​一般情况下，conda命令都是在<em>Anaconda powershell promt</em>中使用。</p><ul><li><p>设置环境变量：在环境变量中添加<strong>Anaconda</strong>中包含conda.exe的文件夹目录。</p></li><li><pre><code class="shell]">#在终端运行 conda init powershell<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><br>* 运行完毕再重启，这时候提示系统禁止运行脚本。修改计算机的执行策略<br><br>* ```<span class="hljs-string">shell</span><br>  <span class="hljs-built_in">get-executionpolicy</span><br>  <span class="hljs-built_in">set-executionpolicy</span> <span class="hljs-string">remotesigned</span><span class="hljs-comment"># 选y</span><br>  <br>  <span class="hljs-built_in">set-executionpolicy</span> <span class="hljs-string">restricted</span><span class="hljs-comment"># 如果要改回来的话</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>这样子以后，终端默认启动aconda</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Clion中优雅地debug</title>
      <link href="/Qt/2023/04/22/Qt/%E5%A6%82%E4%BD%95%E5%9C%A8Clion%E4%B8%AD%E4%BC%98%E9%9B%85%E5%9C%B0debug/"/>
      <url>/Qt/2023/04/22/Qt/%E5%A6%82%E4%BD%95%E5%9C%A8Clion%E4%B8%AD%E4%BC%98%E9%9B%85%E5%9C%B0debug/</url>
      
        <content type="html"><![CDATA[<p> 各种debug的技巧，Clion的优点</p><span id="more"></span><h2 id="内存泄漏问题"><a href="#内存泄漏问题" class="headerlink" title="内存泄漏问题"></a>内存泄漏问题</h2><p>​Clion的debug可以设置在程序出现异常的前一步中断住，这样可以看是哪一步的问题。</p><h2 id="cmake的debug"><a href="#cmake的debug" class="headerlink" title="cmake的debug"></a>cmake的debug</h2><p>​直接在cmake文件里面打断点，也是可以调试cmake语句的</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qcustomplot之修改颜色</title>
      <link href="/Qt/2023/04/04/Qt/Qcustomplor%E4%B9%8B%E4%BF%AE%E6%94%B9%E9%A2%9C%E8%89%B2/"/>
      <url>/Qt/2023/04/04/Qt/Qcustomplor%E4%B9%8B%E4%BF%AE%E6%94%B9%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>图像的颜色修改, 控件的颜色修改</p><span id="more"></span><h2 id="Palette类型"><a href="#Palette类型" class="headerlink" title="Palette类型"></a>Palette类型</h2><blockquote><p>改变控件颜色</p></blockquote><ul><li><p>先获取控件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">QPalette plet = line_[i].choose_color-&gt;<span class="hljs-built_in">palette</span>();<br></code></pre></td></tr></table></figure></li><li><p>修改控件颜色</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">plet.<span class="hljs-built_in">setColor</span> (QPalette::Button, color)<span class="hljs-comment">// color 为 QColor类型</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="QPen"><a href="#QPen" class="headerlink" title="QPen"></a>QPen</h2><blockquote><p>图像颜色修改</p></blockquote><ul><li>直接修改掉QPen的变量即可, 直接对图像进行颜色赋值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">pen.<span class="hljs-built_in">setColor</span> (data_pool_.<span class="hljs-built_in">at</span>(i),color);<br>ui_chart_-&gt;widget-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">setPen</span>(pen);<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">QPalette plet = line_info_[i].choose_color-&gt;<span class="hljs-built_in">palette</span>();<br>QColor currentColor = plet.<span class="hljs-built_in">color</span>(QPalette::Button);    <span class="hljs-comment">// 当前颜色</span><br>QColor color = QColorDialog::<span class="hljs-built_in">getColor</span>(currentColor, <span class="hljs-keyword">this</span>,(<span class="hljs-string">&quot;颜色选择&quot;</span>));<br><br><span class="hljs-keyword">if</span> (color.<span class="hljs-built_in">isValid</span>())&#123;<br>    plet.<span class="hljs-built_in">setColor</span> (QPalette::Button, color);<br>    line_info_[i].choose_color-&gt;<span class="hljs-built_in">setPalette</span> (plet);<br>    data_pool_[i].line_color = color;<span class="hljs-comment">// 这句话好像可以删掉</span><br><br>    <span class="hljs-comment">// 改变图像属性</span><br>    QPen pen;<br>    pen.<span class="hljs-built_in">setWidth</span>(data_pool_.<span class="hljs-built_in">at</span>(i).line_width);<span class="hljs-comment">//设置线宽,默认是2</span><br>    pen.<span class="hljs-built_in">setColor</span>(data_pool_.<span class="hljs-built_in">at</span>(i).line_color);<span class="hljs-comment">//设置线条红色</span><br>    ui_chart_-&gt;widget-&gt;<span class="hljs-built_in">graph</span>(i)-&gt;<span class="hljs-built_in">setPen</span>(pen);<br><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion与QT的那些事</title>
      <link href="/Qt/2023/03/13/Qt/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85QT%E7%89%88%E6%9C%AC%E5%BC%83%E5%AD%90/"/>
      <url>/Qt/2023/03/13/Qt/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85QT%E7%89%88%E6%9C%AC%E5%BC%83%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>因为QT6很多库已经放弃了，所以开发要用到旧版，找了很久才找到。</p><span id="more"></span><h2 id="QT的在线安装程序，最低版本已经去到了v5-15，虽然区别不大，但还是统一开发环境比较好。"><a href="#QT的在线安装程序，最低版本已经去到了v5-15，虽然区别不大，但还是统一开发环境比较好。" class="headerlink" title="QT的在线安装程序，最低版本已经去到了v5.15，虽然区别不大，但还是统一开发环境比较好。"></a>QT的在线安装程序，最低版本已经去到了v5.15，虽然区别不大，但还是统一开发环境比较好。</h2><blockquote><p>QT老版本下载: <a href="https://download.qt.io/archive/qt/">qtdownload</a></p><p>QT论坛: <a href="https://forum.qt.io/">Qt Forum</a></p></blockquote><h2 id="QT在线安装器加载源的问题"><a href="#QT在线安装器加载源的问题" class="headerlink" title="QT在线安装器加载源的问题"></a>QT在线安装器加载源的问题</h2><p>​问题：1. 添加的源用不了2. 官方的源用不了</p><blockquote><p>使用终端打开安装器, 在后面加上  –mirror <a href="https://mirrors.aliyun.com/qt">https://mirrors.aliyun.com/qt</a></p><p>如 .\qt_online.exe –mirror <a href="https://mirrors.aliyun.com/qt">https://mirrors.aliyun.com/qt</a></p></blockquote><h2 id="用Clion开发QT"><a href="#用Clion开发QT" class="headerlink" title="用Clion开发QT"></a>用Clion开发QT</h2><ol><li><p>正常下载好QT, 创建好项目并且可以运行</p><blockquote><p>QT安装可以用在线工具, 也可以下载离线安装包</p><p>安装的时候, 一定要选编译器(上下都要选)…</p></blockquote></li><li><p>Clion中配置好QT的工具链</p></li></ol><blockquote><p>在Tools chain中添加QT的debug, 把qt&#x2F;Tools&#x2F;5.12.12&#x2F;Mingw 添加上去</p></blockquote><p><img src="https://s1.ax1x.com/2023/03/14/ppl2V3V.png"></p><h2 id="关于windows环境变量"><a href="#关于windows环境变量" class="headerlink" title="关于windows环境变量"></a>关于windows环境变量</h2><p>添加完环境变量，一定要重启！！！（除非你用在cmd用命令添加的）</p><h2 id="Clion编译QT程序的问题"><a href="#Clion编译QT程序的问题" class="headerlink" title="Clion编译QT程序的问题"></a>Clion编译QT程序的问题</h2><ol><li>找不到qt-config.cmake</li></ol><blockquote><p>在CMake.list程序里面，添加上set(CMAKE_PREFIX_PATH “E:\\QT\\5.12.11\\mingw73_64\\lib\\cmake\\Qt5”)</p><p>此处改为自己的路径</p></blockquote><ol start="2"><li>找不到对应的库，比如说这次(qserialport)</li></ol><blockquote><p>先去找官网或者别的地方找，看看每个版本之间的差异，可能版本的迭代把某些模块删掉了。</p></blockquote><ol start="3"><li><p>Clion编译通过了，但是运行报错-1073741515 (0xC0000135)</p><blockquote><p>运行失败，这个报错是没有链接到动态链接库dll的原因，在系统环境变量中加上qt的编译路径，如：</p><p><img src="https://s1.ax1x.com/2023/03/14/pplsbRO.png"></p></blockquote></li></ol><p>最后一定要重启!!!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>装软件一定要考虑团队的版本问题, 还有安装时所带的资料库</li><li>windows环境变量设置完之后, 一定要重启电脑</li><li>网上搜教程的同时, 也要去官方论坛看看, bing国际版</li></ul>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT修改槽函数，lambda表达，正则表达</title>
      <link href="/Qt/2023/03/09/Qt/QT%E4%BF%AE%E6%94%B9%E6%A7%BD%E5%87%BD%E6%95%B0%EF%BC%8Clambda%E8%A1%A8%E8%BE%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE/"/>
      <url>/Qt/2023/03/09/Qt/QT%E4%BF%AE%E6%94%B9%E6%A7%BD%E5%87%BD%E6%95%B0%EF%BC%8Clambda%E8%A1%A8%E8%BE%BE%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE/</url>
      
        <content type="html"><![CDATA[<p>QT自定义信号，修改槽函数，lambda表达式，正则表达</p><span id="more"></span><h2 id="修改槽函数"><a href="#修改槽函数" class="headerlink" title="修改槽函数"></a>修改槽函数</h2><ol><li>在private slots 里面添加自定义函数声明，其它的按照官方操作就行</li><li>在widget.cpp 里面写connect函数</li></ol><p>函数原型：</p><p>static QMetaObject::Connection connect(const QObject *sender, const char *signal, const QObject *receiver, const char *member, Qt::ConnectionType &#x3D; Qt::AutoConnection);</p><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">QObject::<span class="hljs-built_in">connect</span>(信号的发送者，发送的信号，槽函数所在的类，自定义接收的槽函数)<br>eg：<br>    QObject::<span class="hljs-built_in">connect</span>(ui-&gt;commit,&amp;QPushButton::clicked,<span class="hljs-keyword">this</span>,&amp;Widget::botton);  <span class="hljs-comment">//QT5规范</span><br>QObject::<span class="hljs-built_in">connect</span>(ui-&gt;commit,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>(),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">botton</span>()));      <span class="hljs-comment">//QT4规范</span><br><br></code></pre></td></tr></table></figure></blockquote><h3 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h3><p><a href="http://c.biancheng.net/view/9429.html">Qt自定义信号和槽函数</a></p><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>通过lambada表达式，实现匿名函数的方法。在connect 使用匿名函数不能用QT4规范。</p><p>lambda捕获列表：</p><ul><li><p>[var]表示值传递方式捕捉变量var；</p></li><li><p>[&#x3D;]表示值传递方式捕捉所有父作用域的变量（包括this）；</p></li><li><p>[&amp;var]表示引用传递捕捉变量var；</p></li><li><p>[&amp;]表示引用传递方式捕捉所有父作用域的变量（包括this）；</p><blockquote><p>在QT中, 虽然是传地址, 但是修改了原来变量的值, 但是新的变量值不变, 实现了一部分传值, 一部分传地址</p></blockquote></li><li><p>[this]表示值传递方式捕捉当前的this指针。<br>上面提到了一个父作用域，也就是包含Lambda函数的语句块，说通俗点就是包含Lambda的“{}”代码块。上面的捕捉列表还可以进行组合，例如：</p><ul><li><p>[&#x3D;,&amp;a,&amp;b]表示以引用传递的方式捕捉变量a和b，以值传递方式捕捉其它所有变量;</p></li><li><p>[&amp;,a,this]表示以值传递的方式捕捉变量a和this，引用传递方式捕捉其它所有变量。<br>不过值得注意的是，捕捉列表不允许变量重复传递。下面一些例子就是典型的重复，会导致编译时期的错误。例如：</p></li><li><p>[&#x3D;,a]这里已经以值传递方式捕捉了所有变量，但是重复捕捉a了，会报错的;</p></li><li><p>[&amp;,&amp;this]这里&amp;已经以引用传递方式捕捉了所有变量，再捕捉this也是一种重复。</p></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">QObject::<span class="hljs-built_in">connect</span>(信号的发送者，发送的信号，槽函数所在的类，[捕获列表](信号里有的变量))<br><span class="hljs-built_in">connect</span>(ui-&gt;commit,&amp;QPushButton::clicked,<span class="hljs-keyword">this</span>,[=]&#123;<br><span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;This is lambda&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><blockquote><ol><li>使用lambda的时候, 用cennect三个参数的重载, 会被clazy警告, 要用四个参数的重载</li><li>写了lambda表达式之后，slots那里已经不需要写任何东西</li></ol></blockquote><h2 id="QT的正则表达"><a href="#QT的正则表达" class="headerlink" title="QT的正则表达"></a>QT的正则表达</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QRegularExpression&gt;</span></span><br><br><span class="hljs-function">QRegularExpression <span class="hljs-title">regexp_int</span><span class="hljs-params">(<span class="hljs-string">&quot;^[0-9]+$&quot;</span>)</span></span>;   <span class="hljs-comment">// int</span><br><span class="hljs-function">QRegularExpression <span class="hljs-title">regexp_float</span><span class="hljs-params">(<span class="hljs-string">&quot;^[0-9]+\\.[0-9]+$&quot;</span>)</span></span>;   <span class="hljs-comment">// float匹配浮点数,要用两个\\转义.</span><br><br><span class="hljs-type">bool</span> valid = regexp_int.<span class="hljs-built_in">isValid</span>();<span class="hljs-comment">// 判断正则表达是否合法</span><br><br>QString pattern = regexp.<span class="hljs-built_in">pattern</span>();<span class="hljs-comment">// 返回正则表达式</span><br><span class="hljs-built_in">qDebug</span>() &lt;&lt; pattern;<br><br>QRegularExpressionMatch number = regexp_int.<span class="hljs-built_in">match</span>(<span class="hljs-string">&quot;abdc 12&quot;</span>);<span class="hljs-comment">// 匹配出符合的结果</span><br><br><span class="hljs-type">bool</span> hasMatch = number.<span class="hljs-built_in">hasMatch</span>(); <span class="hljs-comment">// 是否匹配成功</span><br><br><span class="hljs-built_in">qDebug</span>() &lt;&lt; hasMatch;<br><br><span class="hljs-keyword">if</span> (number.<span class="hljs-built_in">hasMatch</span>())&#123;<br>    QString numbers = number.<span class="hljs-built_in">captured</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// 获取正则匹配结果 </span><br>    <span class="hljs-comment">// 还有 captured(1) captured(2)</span><br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; numbers;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;hasnt enough match&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后面需要用到再查手册</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git高阶用法</title>
      <link href="/Git/2023/03/06/%E5%85%B6%E5%AE%83/git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/Git/2023/03/06/%E5%85%B6%E5%AE%83/git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>git 的基本操作，参考 <a href="http://t.csdn.cn/1QW3G">git技能树</a></p><span id="more"></span><h2 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h2><blockquote><p>以下文件均用变量 FILE 表示</p></blockquote><h3 id="比较变动"><a href="#比较变动" class="headerlink" title="比较变动"></a>比较变动</h3><blockquote><p>查看相对于上一次暂存修改了什么</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff FILE<br></code></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><blockquote><p>输出信息太多, 在后面加上 –pretty&#x3D;online</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log --pretty=online<br></code></pre></td></tr></table></figure><blockquote><p>查看所有的commit记录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br></code></pre></td></tr></table></figure><h3 id="查看时间线"><a href="#查看时间线" class="headerlink" title="查看时间线"></a>查看时间线</h3><blockquote><p>查看历史提交的时间线</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git lg<br></code></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><blockquote><p>在git 中, 当前版本表示HEAD, 上一个版本为HEAD^, 上上个版本为HEAD^^, 依此类推, 100个写成HEAD~100</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">git reset --hard HEAD^<br></code></pre></td></tr></table></figure><h3 id="git重置"><a href="#git重置" class="headerlink" title="git重置"></a>git重置</h3><blockquote><p>相当于撤销命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reflog#查看用过的命令<br><span class="hljs-meta prompt_">#</span><span class="language-bash">找到想要撤回到的命令前面的<span class="hljs-built_in">id</span></span><br>git reflog --hard (e55063a)#这里填自己命令id<br></code></pre></td></tr></table></figure><h3 id="git-log-和-git-reflog"><a href="#git-log-和-git-reflog" class="headerlink" title="git log 和 git reflog"></a>git log 和 git reflog</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log # 查看commit过的信息<br>git reflog# 查看用过的命令<br>git reset --hard commit_id# 回到该版本<br>git reset --hard cmd_id# 回到用这条命令前的状态<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地reset之后，要push上去，远程仓库才能一起回退</span><br></code></pre></td></tr></table></figure><h3 id="取消暂存文件"><a href="#取消暂存文件" class="headerlink" title="取消暂存文件"></a>取消暂存文件</h3><blockquote><p>移除部分在暂存区的文件, 有些命令可以在 git status 中看到</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset HEAD FILE<br></code></pre></td></tr></table></figure><h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><blockquote><p>将文件恢复为上一次提交的样子</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- FILE<br></code></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><blockquote><p>两种情况: 误删, 想要恢复。彻底删除</p></blockquote><p>误删( 前提是版本库里面存在 )</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- FILE # 跟上面同理<br></code></pre></td></tr></table></figure><p>彻底删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先在本地删除, 然后才删除版本库里面的</span><br>git rm FILE<br></code></pre></td></tr></table></figure><p>删除远程仓库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将远程仓库里面的项目文件拉下来，然后可通过<span class="hljs-built_in">dir</span>命令行查看有哪些文件夹</span><br>git pull origin master<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除文件(如“动画demo.md‘)或者文件夹</span><br>git rm --cached “文件”/git rm -r --cached &quot;文件夹’<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将删除操作提交到git仓库</span><br>git commit -m “操作说明”<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将本次修改更新到github远程仓库</span><br>git push -u origin master<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个删除对本地是没影响的,只是针对git本地库和远程库</span><br></code></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><blockquote><p>以下表示: 分支默认用dev</p></blockquote><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch dev<br>git branch -a # 查看本地分支以及远程分支<br></code></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git checkout dev 已经过时了</span><br>git switch dev<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建和切换结合起来</span><br>git switch -c dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将远程分支更新到本地（好像不能成功）</span><br>git remote update origin --prune<br><br></code></pre></td></tr></table></figure><h2 id="指定分支下载"><a href="#指定分支下载" class="headerlink" title="指定分支下载"></a>指定分支下载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone -b branch_name git@git...<br></code></pre></td></tr></table></figure><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin --delete branch_name# 删除远程<br>git branch -d branch_name   # 删除本地<br></code></pre></td></tr></table></figure><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><blockquote><ul><li><p>通常合并分支的时候, 会采用Fast forward 模式, 这种模式下, 删除分支后相关的信息也会删除</p></li><li><p>如果禁用了这种模式, merge的时候会生成新的commit信息, 在历史上就能查到分支信息</p></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge --no-ff -m &quot;merge with no-ff&quot; dev # 这里加上了-m, 因为要产生新的commit信息<br></code></pre></td></tr></table></figure><h3 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h3><blockquote><p>工作到一半, 工作区还有东西, 同时还要改bug的情况</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash# 把当前的工作区储存起来<br>git stash list # 查看储存的工作区<br>git stash apply (id) # 仅恢复工作区,当多个stash的时候,写id<br>git stash drop# 删除储存的工作区<br>git stash pop # 恢复的同时,删除储存的工作区<br></code></pre></td></tr></table></figure><ul><li>同一个bug, 在两个不同的分支, 改完bug, 可以复刻特定的提交到其它分支</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git cherry-pick (id) # id填commit bug时候的id<br></code></pre></td></tr></table></figure><h3 id="feature分支"><a href="#feature分支" class="headerlink" title="feature分支"></a>feature分支</h3><h3 id="加速访问"><a href="#加速访问" class="headerlink" title="加速访问"></a>加速访问</h3><ol><li>steam++</li><li>uu加速器</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04安装ROS</title>
      <link href="/Linu/2023/02/27/Linux/Ubuntu20-04%E5%AE%89%E8%A3%85ROS/"/>
      <url>/Linu/2023/02/27/Linux/Ubuntu20-04%E5%AE%89%E8%A3%85ROS/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu20.04安装ROS基本步骤，遇到的问题，小乌龟测试。ROS系统目前流行有两个版本：noetic和melodic。还有很多ROS发行版。</p><span id="more"></span><h2 id="安装ROS"><a href="#安装ROS" class="headerlink" title="安装ROS"></a>安装ROS</h2><h3 id="添加软件包路径"><a href="#添加软件包路径" class="headerlink" title="添加软件包路径"></a>添加软件包路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sh -c &#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;<br></code></pre></td></tr></table></figure><h3 id="设置ROS版本密钥（哪里拿的还不知道）"><a href="#设置ROS版本密钥（哪里拿的还不知道）" class="headerlink" title="设置ROS版本密钥（哪里拿的还不知道）"></a>设置ROS版本密钥（哪里拿的还不知道）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install curl #安装curl工具<br>curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654<br></code></pre></td></tr></table></figure><h3 id="安装、初始化环境变量"><a href="#安装、初始化环境变量" class="headerlink" title="安装、初始化环境变量"></a>安装、初始化环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update#更新一下源<br>sudo apt install ros-noetic-desktop-full#安装ROS完全版<br>source /opt/ros/noetic/setup.bash<br>echo &quot;source /opt/ros/noetic/setup.bash&quot; &gt;&gt; ~/.bashrc<br>source ~/.bashrc#均为配置环境变量<br></code></pre></td></tr></table></figure><h3 id="安装各种依赖包"><a href="#安装各种依赖包" class="headerlink" title="安装各种依赖包"></a>安装各种依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential#安装各种依赖包<br></code></pre></td></tr></table></figure><h3 id="管理各种工具的软件"><a href="#管理各种工具的软件" class="headerlink" title="管理各种工具的软件"></a>管理各种工具的软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install python3-rosdep#安装管理工具<br></code></pre></td></tr></table></figure><h3 id="初始化rosdep（先别执行这里，先看下去）"><a href="#初始化rosdep（先别执行这里，先看下去）" class="headerlink" title="初始化rosdep（先别执行这里，先看下去）"></a>初始化rosdep（先别执行这里，先看下去）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rosdep init<br>rosdep update<br></code></pre></td></tr></table></figure><h3 id="替换rosdep相关链接"><a href="#替换rosdep相关链接" class="headerlink" title="替换rosdep相关链接"></a>替换rosdep相关链接</h3><blockquote><p>因为某些链接,在国内被屏蔽了,所以不能初始化成功. 下面需要手动配置链接.</p></blockquote><p>手动克隆文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/ros/noetic/#一定要切换到这个目录<br>git clone https://github.com/ros/rosdistro.git#克隆ros官方文件<br></code></pre></td></tr></table></figure><p>需要修改的文件有:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/ros/noetic/rosdistro/rosdep/sources.list.d/20-default.list#跟下面的不一样<br><br>/usr/lib/python3/dist-packages/rosdep2/gbpdistro_support.py<br><br>/usr/lib/python3/dist-packages/rosdep2/rep3.py<br><br>/usr/lib/python3/dist-packages/rosdistro/__init__.py<br><br>/etc/ros/rosdep/sources.list.d/20-default.list#别以为是一样的<br></code></pre></td></tr></table></figure><p>修改详情请看:<a href="!https://zhuanlan.zhihu.com/p/515361781">Ubuntu20.04.4安装ROS Noetic详细教程</a></p><h3 id="安装遇到的问题"><a href="#安装遇到的问题" class="headerlink" title="安装遇到的问题"></a>安装遇到的问题</h3><ol><li>rosdep初始化失败问题：国内屏蔽了下载链接</li><li>运行小乌龟键盘控制不了：鼠标要选中控制节点的那个窗口，而不是选中小乌龟的窗口</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><strong>ROS-wiki</strong> <a href="http://wiki.ros.org/noetic/Installation/Ubuntu">noetic&#x2F;Installation&#x2F;Ubuntu - ROS Wiki</a></p><p><strong>zhihu</strong> <a href="!https://zhuanlan.zhihu.com/p/515361781">Ubuntu20.04.4安装ROS Noetic详细教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Linu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> ROS </tag>
            
            <tag> Gazebo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SD模块以及FATFS文件系统</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/02/20/%E5%8D%95%E7%89%87%E6%9C%BA/SD%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8AFATFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/02/20/%E5%8D%95%E7%89%87%E6%9C%BA/SD%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8AFATFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>23科创杯模块, 使用SD卡读写, SPI通讯协议</p><span id="more"></span><hr><h2 id="某些资料"><a href="#某些资料" class="headerlink" title="某些资料"></a>某些资料</h2><blockquote><p>CMD0 使SD卡进入空闲模式</p><p>​正确情况：返回1，但是返回了0</p><p>CMD8 查看SD卡版本，1 为2.0</p><p>CMD55 </p><p>CMD41</p><p>CMD58</p></blockquote><ul><li><p>将初始化函数放进disk文件中，挂载出来是13，</p></li><li><p>外面初始化，里面初始化，挂在出来是13</p></li><li><p>外面初始化，里面不初始化，挂出来是3</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电机驱动</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/31/%E5%8D%95%E7%89%87%E6%9C%BA/%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/31/%E5%8D%95%E7%89%87%E6%9C%BA/%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>电机驱动原理、TB6612接线、PID</p><span id="more"></span><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>电机的正转比反转转速更快</p><p>正转满速：4900&#x2F;0.5s</p><p>反转满速：-5200&#x2F;0.5s</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><ul><li><p>创建了野指针，导致程序无法正常运行</p></li><li><p>使用scanf</p><ul><li>用了scanf，不需要再使用中断接收，中断回调这些函数了，记得子啊cube开启串口中断就行了，直接调用scanf就行了</li><li>还有这里的scanf和C里面的不一样，在格式输入里没有字符</li><li>即使是写成scanf(“kp&#x3D;%d”),scanf(“%d,%d”)，这种形式都不行</li><li>不过scanf(“%d%d%d”)，输入的时候可以写1，1，1 。中间可以加逗号</li></ul></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 模块 </tag>
            
            <tag> 电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝牙小车之改bug</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/09/%E5%8D%95%E7%89%87%E6%9C%BA/%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6%E4%B9%8B%E6%94%B9bug/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/09/%E5%8D%95%E7%89%87%E6%9C%BA/%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6%E4%B9%8B%E6%94%B9bug/</url>
      
        <content type="html"><![CDATA[<p>经典写代码半小时，改bug两小时</p><span id="more"></span><h2 id="串口接收中断"><a href="#串口接收中断" class="headerlink" title="串口接收中断"></a>串口接收中断</h2><blockquote><p>在cube配置UART的时候,忘记在中断接收那里✔了…</p></blockquote><h2 id="串口接收数据过程"><a href="#串口接收数据过程" class="headerlink" title="串口接收数据过程"></a>串口接收数据过程</h2><blockquote><p>发送数据时,是整体打包发送.(在中断回调函数中)在接收的时候,是一位一位读取的,在检测到后面两个截止位的时候,就会停止接收,进入下一个任务.</p><p>如果在检测到截止位就立即清空数据包, 那么在外面的大循环中就无法判断到接收到的数据包, 应该在执行完判断任务后再清空.</p></blockquote><h2 id="串口接收到的数据包"><a href="#串口接收到的数据包" class="headerlink" title="串口接收到的数据包"></a>串口接收到的数据包</h2><blockquote><p>通过普通的usb转串口模块,接收到的数据包有两个截止位(0X0D,0X0A)</p><p>但是用蓝牙通信发送的,只是软件上配置的数据,没有加截止位</p></blockquote><h2 id="printf的重定向"><a href="#printf的重定向" class="headerlink" title="printf的重定向"></a>printf的重定向</h2><p>在usart.c源文件中(针对于 cube),添加下面的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">extern</span> UART_HandleTypeDef huart1;<br><span class="hljs-comment">//只重定向到了UART1</span><br><span class="hljs-comment">//重定向printf函数到串口</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch,FILE* f)</span>&#123;<br>  HAL_UART_Transmit(&amp;huart1,(<span class="hljs-type">uint8_t</span>* )&amp;ch,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>);<span class="hljs-comment">//注意这里的int类型的ch,要强制转换一下类型</span><br>  <span class="hljs-keyword">return</span> ch;<br>&#125;<br><br><span class="hljs-comment">//重定向scanf函数到串口</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span><span class="hljs-params">(FILE* F)</span>&#123;<br>  <span class="hljs-type">uint8_t</span> ch_r = <span class="hljs-number">0</span>;<br>  HAL_UART_Receive(&amp;huart1,&amp;ch_r,<span class="hljs-number">1</span>,<span class="hljs-number">0xffff</span>);<br>  <span class="hljs-keyword">return</span> ch_r;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>重定向原理: printf默认输出设备是显示器终端,如果要显示到串口或者lcd之类上,就要重定向.</p><p><strong>注意</strong> : 还要在keil上勾选use microlib</p><p><img src="http://github.xutongxin.me/https://raw.githubusercontent.com/xutongxin1/PictureBed/master/img4/202307271446197.png" alt="image-20230727144627086"></p></blockquote><h2 id="sizeof的计算"><a href="#sizeof的计算" class="headerlink" title="sizeof的计算"></a>sizeof的计算</h2><blockquote><p>sizeof计算的是定义到的数组长度,也就是定义了多少,计算出来就是多少  .</p><p>还有一个计算是实际的长度,忘记是什么函数了</p><ul><li>如果里面传的是指针的话，这就是另一种情况了</li></ul></blockquote><h2 id="STM32cube配置出现中文乱码（错误的）"><a href="#STM32cube配置出现中文乱码（错误的）" class="headerlink" title="STM32cube配置出现中文乱码（错误的）"></a>STM32cube配置出现中文乱码（错误的）</h2><p>在Windows的环境变量中加入这个, 这种方法目前还没测试过.</p><blockquote><ul><li>变量名称：JAVA_TOOL_OPTIONS</li><li>变量值：-Dfile.encoding &#x3D; UTF-8</li></ul></blockquote><h2 id="PID-的那些事"><a href="#PID-的那些事" class="headerlink" title="PID 的那些事"></a>PID 的那些事</h2><h3 id="Question："><a href="#Question：" class="headerlink" title="Question："></a>Question：</h3><ul><li>如果在空转的时候，调好的pid，落地后，会不会影响结果？</li><li></li></ul><h2 id="模块化编程问题"><a href="#模块化编程问题" class="headerlink" title="模块化编程问题"></a>模块化编程问题</h2><p>函数调用之间的问题，传参问题，数据处理之后的操作</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> STM32 </tag>
            
            <tag> HAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAL之UART</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/07/%E5%8D%95%E7%89%87%E6%9C%BA/HAL%E4%B9%8BUART/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/07/%E5%8D%95%E7%89%87%E6%9C%BA/HAL%E4%B9%8BUART/</url>
      
        <content type="html"><![CDATA[<p>UART常用函数，HAL库的串口中断流程</p><span id="more"></span><hr><p>HAL_UART_Transmit(); 串口发送数据，使用超时管理机制<br>HAL_UART_Transmit_IT();    串口中断模式发送<br>HAL_UART_Transmit_DMA();       串口DMA模式发送</p><p>HAL_UART_Receive_IT();     串口中断模式接收<br>HAL_UART_Receive();  串口接收数据，使用超时管理机制<br>HAL_UART_Transmit_DMA();   串口DMA模式接收</p><h3 id="串口中断流程"><a href="#串口中断流程" class="headerlink" title="串口中断流程"></a>串口中断流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">HAL_UART_Receive_IT//中断接收函数<br>USART2_IRQHandler(void)//中断服务函数<br>HAL_UART_IRQHandler(*huart)//中断处理函数<br>UART_Receive_IT(*huart)//接收函数<br>HAL_UART_RxCpltCallback(huart)//中断回调函数(要自己修改)<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TBA(中断接收函数)--&gt;B(中断服务函数)--&gt;C(中断处理函数)--&gt;D(接收函数)--&gt;E(中断回调函数)--&gt;A(中断接收函数)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> STM32 </tag>
            
            <tag> HAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAL之GPIO</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/07/%E5%8D%95%E7%89%87%E6%9C%BA/HAL%E4%B9%8BGPIO/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/07/%E5%8D%95%E7%89%87%E6%9C%BA/HAL%E4%B9%8BGPIO/</url>
      
        <content type="html"><![CDATA[<p>常用的GPIO函数以及工作模式</p><span id="more"></span><hr><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h4 id="输入函数"><a href="#输入函数" class="headerlink" title="输入函数"></a>输入函数</h4><blockquote><p>HAL_GPIO_ReadPin()&#x2F;&#x2F;读取引脚电平</p></blockquote><h4 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h4><blockquote><p>HAL_GPIO_WritePin()&#x2F;&#x2F;写入高低电平</p><p>HAL_GPIO_TogglePin()&#x2F;&#x2F;反转电平</p></blockquote><h4 id="中断函数"><a href="#中断函数" class="headerlink" title="中断函数"></a>中断函数</h4><blockquote><p>HAL_GPIO_EXTI_IRQHandler()&#x2F;&#x2F;外部中断服务函数</p><p>HAL_GPIO_EXTI_Callback()&#x2F;&#x2F;外部中断回调函数</p></blockquote><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><h3 id="输入模式GPIO-Input"><a href="#输入模式GPIO-Input" class="headerlink" title="输入模式GPIO_Input"></a>输入模式GPIO_Input</h3><p>浮空输入</p><blockquote><p>引脚电平是真实的外部连接器件电压，电平有不确定性</p></blockquote><p>上拉输入</p><blockquote><p>默认通过电阻上拉到VCC,不接外部器件时可以读出高电平</p></blockquote><p>下拉输入</p><blockquote><p>默认通过电阻下拉到GND,不接外部器件时可以读出低电平</p></blockquote><h3 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h3><p>推挽(push pull)</p><blockquote><p>一种使用一对选择性地从相连负载灌电流或者拉电流的器件的电路。</p></blockquote><p>开漏(open drain)</p><blockquote><p>高电平时没有驱动能力，需要借助外部上拉电阻完成对外驱动。</p></blockquote><p>浮空(no-pull-)</p><blockquote><p>引脚电平是真实的外部连接器件电压，电平有不确定性</p></blockquote><p>上拉</p><blockquote><p>默认通过电阻上拉到VCC,不接外部器件时可以输出高电平</p></blockquote><p>下拉</p><blockquote><p>默认通过电阻下拉到GND,不接外部器件时可以输出低电平 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> STM32 </tag>
            
            <tag> HAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝牙模块HC-05</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/07/%E5%8D%95%E7%89%87%E6%9C%BA/%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97HC-05/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/07/%E5%8D%95%E7%89%87%E6%9C%BA/%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97HC-05/</url>
      
        <content type="html"><![CDATA[<p>HC-05蓝牙模块基本原理及使用方法</p><span id="more"></span><hr><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><ol><li>AT测试的波特率默认为38400,1停止位,8数据位</li><li>蓝牙通信波特率默认为9600,0,0</li></ol><h3 id="AT测试"><a href="#AT测试" class="headerlink" title="AT测试"></a>AT测试</h3><blockquote><p>接线: </p><ul><li><p>GND-&gt;GND</p></li><li><p>RXD-&gt;TXD</p></li><li><p>TXD-&gt;RXD</p></li><li><p>VCC-&gt;5V</p></li><li><p>EN和STATE不接</p></li><li><p><strong>注意: 模块上的VCC不能接3.3V</strong>, 资料说不可以，但是我接VCC和3V3都没问题。</p><p>按住模块上的按键再去供电, 进入慢闪(一秒一次)模式，即为AT测试</p></li></ul></blockquote><h3 id="AT测试命令"><a href="#AT测试命令" class="headerlink" title="AT测试命令"></a>AT测试命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1.</span> 先输入AT，当返回OK时，代表进入AT测试<br>AT+VERSION<span class="hljs-comment">//当前版本</span><br>AT+ORGL<span class="hljs-comment">//恢复出厂设置</span><br>AT+RESET<span class="hljs-comment">//复位</span><br>AT+NAME<span class="hljs-comment">//蓝牙名字</span><br>AT+PSWD<span class="hljs-comment">//连接密码</span><br>AT+ROLE<span class="hljs-comment">//模式选择</span><br>    <span class="hljs-number">1</span>：从机<br>    <span class="hljs-number">2</span>：主机<br>    <span class="hljs-number">3</span>：回环<br>AT+UART<span class="hljs-comment">//波特率</span><br>AT+ADDR<span class="hljs-comment">//蓝牙地址码</span><br>AT+STATE<span class="hljs-comment">//当前工作状态</span><br>AT+DISC<span class="hljs-comment">//断开连接</span><br>AT+RNAME<span class="hljs-comment">//获取远程蓝牙设备名称</span><br>AT+ADCN<span class="hljs-comment">//获取蓝牙配对表中设备个数</span><br>......<br><br></code></pre></td></tr></table></figure><h3 id="蓝牙连接"><a href="#蓝牙连接" class="headerlink" title="蓝牙连接"></a>蓝牙连接</h3><p>AT测试，查询完相应数据后，拔掉电源。这次不用按按键，直接插电。模块的灯快闪，进入等待连接状态。</p><blockquote><p>手机打开<a href="https://pan.baidu.com/s/165RPnBSNWQYb76hcuZfKIg?pwd=6666">蓝牙调试器</a> , <a href="https://www.jianshu.com/p/1a8262492619">蓝牙调试器介绍</a></p><p>找到设备, 默认的连接密码为1234.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L298N驱动</title>
      <link href="/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/06/%E5%8D%95%E7%89%87%E6%9C%BA/L298N%E9%A9%B1%E5%8A%A8/"/>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2023/01/06/%E5%8D%95%E7%89%87%E6%9C%BA/L298N%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>L298N原理图及驱动方式</p><span id="more"></span><hr><center><h1 style="color:yellow">    L298N    </h1></center><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><div align = "center"><img src="https://pic2.zhimg.com/80/v2-625094b40f2c5230af1b70f5e3c6ba35_1440w.webp"><hr><img src="https://pic4.zhimg.com/80/v2-8fb3efbd0d82669a496a179a46655e47_1440w.webp"><hr><img src="https://pic2.zhimg.com/80/v2-8ed7420890b8dc5b3dd5f0b5c02a7b11_1440w.webp"></div><h3 id="接线方式"><a href="#接线方式" class="headerlink" title="接线方式"></a>接线方式</h3><blockquote><ul><li><p>工作电压: 9~12v</p></li><li><p>将电池盒或者锂电池的<strong>正极</strong>接到上图的<strong>vcc</strong></p></li><li><p>如果安装了5v跳线帽, 5v接口是用来给单片机供电的, 这种情况下, 供电电源的GND要分两条, 模块和单片机共地</p><blockquote><p>如果用5V来给单片机供电的话, 可能会出问题, 因为没有稳压, 可能会有掉压的情况.</p></blockquote></li><li><p>电机分别接上图8, 9 引脚7</p></li></ul></blockquote><h3 id="驱动方式"><a href="#驱动方式" class="headerlink" title="驱动方式"></a>驱动方式</h3><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">电机</td><td align="center">旋转方式</td><td align="center">IN1</td><td align="center">IN2</td><td align="center">IN3</td><td align="center">IN4</td></tr><tr><td align="center">M1</td><td align="center">正转</td><td align="center">高</td><td align="center">低</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center">(左)</td><td align="center">反转</td><td align="center">低</td><td align="center">高</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center"></td><td align="center">停止</td><td align="center">低</td><td align="center">低</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center">M2</td><td align="center">正转</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">高</td><td align="center">低</td></tr><tr><td align="center">(右)</td><td align="center">反转</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">低</td><td align="center">高</td></tr><tr><td align="center"></td><td align="center">停止</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">低</td><td align="center">低</td></tr></tbody></table><blockquote><p>如果要用PWM调速的话, 要拔掉<strong>ENA</strong>和<strong>ENB</strong>的跳线帽, 将PWM输出到这两个引脚来实现PWM调速.</p><p>IN口控制正反转, EN口用来调速</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
