{"meta":{"title":"YWM'S BLOG","subtitle":"","description":"","author":"YWM","url":"https://blog.xsaistudio.cn","root":"/"},"pages":[],"posts":[{"title":"Ubuntu20.04安装ROS","slug":"Ubuntu20-04安装ROS","date":"2023-02-27T02:37:50.000Z","updated":"2023-02-27T14:14:28.473Z","comments":true,"path":"2023/02/27/Ubuntu20-04安装ROS/","link":"","permalink":"https://blog.xsaistudio.cn/2023/02/27/Ubuntu20-04%E5%AE%89%E8%A3%85ROS/","excerpt":"Ubuntu20.04安装ROS基本步骤，遇到的问题，小乌龟测试。ROS系统目前流行有两个版本：noetic和melodic。还有很多ROS发行版。","text":"Ubuntu20.04安装ROS基本步骤，遇到的问题，小乌龟测试。ROS系统目前流行有两个版本：noetic和melodic。还有很多ROS发行版。 安装ROS添加软件包路径1sudo sh -c &#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27; 设置ROS版本密钥（哪里拿的还不知道）12sudo apt install curl #安装curl工具curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 安装、初始化环境变量12345sudo apt update #更新一下源sudo apt install ros-noetic-desktop-full #安装ROS完全版source /opt/ros/noetic/setup.bash echo &quot;source /opt/ros/noetic/setup.bash&quot; &gt;&gt; ~/.bashrcsource ~/.bashrc #均为配置环境变量 安装各种依赖包1sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential #安装各种依赖包 管理各种工具的软件1sudo apt install python3-rosdep #安装管理工具 初始化rosdep（先别执行这里，先看下去）12sudo rosdep init rosdep update 替换rosdep相关链接 因为某些链接,在国内被屏蔽了,所以不能初始化成功. 下面需要手动配置链接. 手动克隆文件: 12cd /opt/ros/noetic/ #一定要切换到这个目录git clone https://github.com/ros/rosdistro.git #克隆ros官方文件 需要修改的文件有: 123456789/opt/ros/noetic/rosdistro/rosdep/sources.list.d/20-default.list #跟下面的不一样/usr/lib/python3/dist-packages/rosdep2/gbpdistro_support.py/usr/lib/python3/dist-packages/rosdep2/rep3.py/usr/lib/python3/dist-packages/rosdistro/__init__.py/etc/ros/rosdep/sources.list.d/20-default.list #别以为是一样的 修改详情请看:Ubuntu20.04.4安装ROS Noetic详细教程 安装遇到的问题 rosdep初始化失败问题：国内屏蔽了下载链接 运行小乌龟键盘控制不了：鼠标要选中控制节点的那个窗口，而不是选中小乌龟的窗口 参考资料ROS-wiki noetic&#x2F;Installation&#x2F;Ubuntu - ROS Wiki zhihu Ubuntu20.04.4安装ROS Noetic详细教程","categories":[],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://blog.xsaistudio.cn/tags/Ubuntu/"},{"name":"ROS","slug":"ROS","permalink":"https://blog.xsaistudio.cn/tags/ROS/"},{"name":"Gazebo","slug":"Gazebo","permalink":"https://blog.xsaistudio.cn/tags/Gazebo/"}]},{"title":"SD模块以及FATFS文件系统","slug":"SD模块以及FATFS文件系统","date":"2023-02-20T13:33:49.000Z","updated":"2023-02-22T01:33:17.659Z","comments":true,"path":"2023/02/20/SD模块以及FATFS文件系统/","link":"","permalink":"https://blog.xsaistudio.cn/2023/02/20/SD%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8AFATFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"CMD0 使SD卡进入空闲模式 ​ 正确情况：返回1，但是返回了0 CMD8 查看SD卡版本，1 为2.0 CMD55 CMD41 CMD58 将初始化函数放进disk文件中，挂载出来是13， 外面初始化，里面初始化，挂在出来是13 外面初始化，里面不初始化，挂出来是3","categories":[],"tags":[]},{"title":"八路巡线模块","slug":"八路巡线模块","date":"2023-02-04T13:49:56.000Z","updated":"2023-02-26T00:36:59.720Z","comments":true,"path":"2023/02/04/八路巡线模块/","link":"","permalink":"https://blog.xsaistudio.cn/2023/02/04/%E5%85%AB%E8%B7%AF%E5%B7%A1%E7%BA%BF%E6%A8%A1%E5%9D%97/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"VS1053","slug":"VS1053","date":"2023-02-04T13:49:39.000Z","updated":"2023-02-19T10:51:30.437Z","comments":true,"path":"2023/02/04/VS1053/","link":"","permalink":"https://blog.xsaistudio.cn/2023/02/04/VS1053/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"电机驱动","slug":"电机驱动","date":"2023-01-31T09:56:10.000Z","updated":"2023-02-14T06:16:39.404Z","comments":true,"path":"2023/01/31/电机驱动/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/31/%E7%94%B5%E6%9C%BA%E9%A9%B1%E5%8A%A8/","excerpt":"电机驱动原理、TB6612接线、PID","text":"电机驱动原理、TB6612接线、PID 发现电机的正转比反转转速更快 正转满速：4900&#x2F;0.5s 反转满速：-5200&#x2F;0.5s 遇到问题 创建了野指针，导致程序无法正常运行 使用scanf 用了scanf，不需要再使用中断接收，中断回调这些函数了，记得子啊cube开启串口中断就行了，直接调用scanf就行了 还有这里的scanf和C里面的不一样，在格式输入里没有字符 即使是写成scanf(“kp&#x3D;%d”),scanf(“%d,%d”)，这种形式都不行 不过scanf(“%d%d%d”)，输入的时候可以写1，1，1 。中间可以加逗号","categories":[],"tags":[{"name":"模块","slug":"模块","permalink":"https://blog.xsaistudio.cn/tags/%E6%A8%A1%E5%9D%97/"},{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"电机","slug":"电机","permalink":"https://blog.xsaistudio.cn/tags/%E7%94%B5%E6%9C%BA/"}]},{"title":"蓝牙小车之改bug","slug":"蓝牙小车之改bug","date":"2023-01-09T15:21:26.000Z","updated":"2023-02-24T16:04:31.830Z","comments":true,"path":"2023/01/09/蓝牙小车之改bug/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/09/%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6%E4%B9%8B%E6%94%B9bug/","excerpt":"经典写代码半小时，改bug两小时","text":"经典写代码半小时，改bug两小时 串口接收中断 在cube配置UART的时候,忘记在中断接收那里✔了… 串口接收数据过程 发送数据时,是整体打包发送. (在中断回调函数中)在接收的时候,是一位一位读取的,在检测到后面两个截止位的时候,就会停止接收,进入下一个任务. 如果在检测到截止位就立即清空数据包, 那么在外面的大循环中就无法判断到接收到的数据包, 应该在执行完判断任务后再清空. 串口接收到的数据包 通过普通的usb转串口模块,接收到的数据包有两个截止位(0X0D,0X0A) 但是用蓝牙通信发送的,只是软件上配置的数据,没有加截止位 printf的重定向在usart.c源文件中(针对于 cube),添加下面的代码 12345678910111213141516#include &lt;stdio.h&gt;extern UART_HandleTypeDef huart1;//只重定向到了UART1//重定向printf函数到串口int fputc(int ch,FILE* f)&#123; HAL_UART_Transmit(&amp;huart1,(uint8_t* )&amp;ch,1,1000); //注意这里的int类型的ch,要强制转换一下类型 return ch;&#125;//重定向scanf函数到串口int fgetc(FILE* F)&#123; uint8_t ch_r = 0; HAL_UART_Receive(&amp;huart1,&amp;ch_r,1,0xffff); return ch_r;&#125; 重定向原理: printf默认输出设备是显示器终端,如果要显示到串口或者lcd之类上,就要重定向. 注意 : 还要在keil上勾选use microlib sizeof的计算 sizeof计算的是定义到的数组长度,也就是定义了多少,计算出来就是多少 . 还有一个计算是实际的长度,忘记是什么函数了 如果里面传的是指针的话，这就是另一种情况了 STM32cube配置出现中文乱码（错误的）在Windows的环境变量中加入这个, 这种方法目前还没测试过. 变量名称：JAVA_TOOL_OPTIONS 变量值：-Dfile.encoding &#x3D; UTF-8","categories":[],"tags":[{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"HAL","slug":"HAL","permalink":"https://blog.xsaistudio.cn/tags/HAL/"},{"name":"STM32","slug":"STM32","permalink":"https://blog.xsaistudio.cn/tags/STM32/"}]},{"title":"HAL之UART","slug":"HAL之UART","date":"2023-01-07T12:24:03.000Z","updated":"2023-01-08T16:04:12.381Z","comments":true,"path":"2023/01/07/HAL之UART/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/07/HAL%E4%B9%8BUART/","excerpt":"UART常用函数，HAL库的串口中断流程","text":"UART常用函数，HAL库的串口中断流程 HAL_UART_Transmit(); 串口发送数据，使用超时管理机制HAL_UART_Transmit_IT(); 串口中断模式发送HAL_UART_Transmit_DMA(); 串口DMA模式发送 HAL_UART_Receive_IT(); 串口中断模式接收HAL_UART_Receive(); 串口接收数据，使用超时管理机制HAL_UART_Transmit_DMA(); 串口DMA模式接收 串口中断流程12345HAL_UART_Receive_IT //中断接收函数USART2_IRQHandler(void) //中断服务函数HAL_UART_IRQHandler(*huart) //中断处理函数UART_Receive_IT(*huart) //接收函数HAL_UART_RxCpltCallback(huart) //中断回调函数(要自己修改) 12graph TBA(中断接收函数)--&gt;B(中断服务函数)--&gt;C(中断处理函数)--&gt;D(接收函数)--&gt;E(中断回调函数)--&gt;A(中断接收函数)","categories":[],"tags":[{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"HAL","slug":"HAL","permalink":"https://blog.xsaistudio.cn/tags/HAL/"},{"name":"STM32","slug":"STM32","permalink":"https://blog.xsaistudio.cn/tags/STM32/"}]},{"title":"HAL之GPIO","slug":"HAL之GPIO","date":"2023-01-07T09:40:59.000Z","updated":"2023-01-07T12:24:45.797Z","comments":true,"path":"2023/01/07/HAL之GPIO/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/07/HAL%E4%B9%8BGPIO/","excerpt":"常用的GPIO函数以及工作模式","text":"常用的GPIO函数以及工作模式 常用函数输入函数 HAL_GPIO_ReadPin() &#x2F;&#x2F;读取引脚电平 输出函数 HAL_GPIO_WritePin() &#x2F;&#x2F;写入高低电平 HAL_GPIO_TogglePin() &#x2F;&#x2F;反转电平 中断函数 HAL_GPIO_EXTI_IRQHandler() &#x2F;&#x2F;外部中断服务函数 HAL_GPIO_EXTI_Callback() &#x2F;&#x2F;外部中断回调函数 工作模式输入模式GPIO_Input浮空输入 引脚电平是真实的外部连接器件电压，电平有不确定性 上拉输入 默认通过电阻上拉到VCC,不接外部器件时可以读出高电平 下拉输入 默认通过电阻下拉到GND,不接外部器件时可以读出低电平 输出模式推挽(push pull) 一种使用一对选择性地从相连负载灌电流或者拉电流的器件的电路。 开漏(open drain) 高电平时没有驱动能力，需要借助外部上拉电阻完成对外驱动。 浮空(no-pull-) 引脚电平是真实的外部连接器件电压，电平有不确定性 上拉 默认通过电阻上拉到VCC,不接外部器件时可以输出高电平 下拉 默认通过电阻下拉到GND,不接外部器件时可以输出低电平","categories":[],"tags":[{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"HAL","slug":"HAL","permalink":"https://blog.xsaistudio.cn/tags/HAL/"},{"name":"STM32","slug":"STM32","permalink":"https://blog.xsaistudio.cn/tags/STM32/"}]},{"title":"蓝牙模块HC-05","slug":"蓝牙模块HC-05","date":"2023-01-07T03:32:23.000Z","updated":"2023-01-07T12:37:11.400Z","comments":true,"path":"2023/01/07/蓝牙模块HC-05/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/07/%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97HC-05/","excerpt":"HC-05蓝牙模块基本原理及使用方法","text":"HC-05蓝牙模块基本原理及使用方法 波特率 AT测试的波特率默认为38400,1停止位,8数据位 蓝牙通信波特率默认为9600,0,0 AT测试 接线: GND-&gt;GND RXD-&gt;TXD TXD-&gt;RXD VCC-&gt;5V EN和STATE不接 注意: 模块上的VCC不能接3.3V, 资料说不可以，但是我接VCC和3V3都没问题。 按住模块上的按键再去供电, 进入慢闪(一秒一次)模式，即为AT测试 AT测试命令1234567891011121314151617181. 先输入AT，当返回OK时，代表进入AT测试AT+VERSION //当前版本AT+ORGL //恢复出厂设置AT+RESET //复位AT+NAME //蓝牙名字AT+PSWD //连接密码AT+ROLE //模式选择 1：从机 2：主机 3：回环AT+UART //波特率AT+ADDR //蓝牙地址码AT+STATE //当前工作状态AT+DISC //断开连接AT+RNAME //获取远程蓝牙设备名称AT+ADCN //获取蓝牙配对表中设备个数...... 蓝牙连接AT测试，查询完相应数据后，拔掉电源。这次不用按按键，直接插电。模块的灯快闪，进入等待连接状态。 手机打开蓝牙调试器 , 蓝牙调试器介绍 找到设备, 默认的连接密码为1234.","categories":[],"tags":[{"name":"模块","slug":"模块","permalink":"https://blog.xsaistudio.cn/tags/%E6%A8%A1%E5%9D%97/"},{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"}]},{"title":"L298N驱动","slug":"L298N驱动","date":"2023-01-06T10:00:10.000Z","updated":"2023-01-08T14:46:11.462Z","comments":true,"path":"2023/01/06/L298N驱动/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/06/L298N%E9%A9%B1%E5%8A%A8/","excerpt":"L298N原理图及驱动方式","text":"L298N原理图及驱动方式 L298N 原理图 接线方式 工作电压: 9~12v 将电池盒或者锂电池的正极接到上图的vcc 如果安装了5v跳线帽, 5v接口是用来给单片机供电的, 这种情况下, 供电电源的GND要分两条, 模块和单片机共地 如果用5V来给单片机供电的话, 可能会出问题, 因为没有稳压, 可能会有掉压的情况. 电机分别接上图8, 9 引脚7 驱动方式 电机 旋转方式 IN1 IN2 IN3 IN4 M1 正转 高 低 &#x2F; &#x2F; (左) 反转 低 高 &#x2F; &#x2F; 停止 低 低 &#x2F; &#x2F; M2 正转 &#x2F; &#x2F; 高 低 (右) 反转 &#x2F; &#x2F; 低 高 停止 &#x2F; &#x2F; 低 低 如果要用PWM调速的话, 要拔掉ENA和ENB的跳线帽, 将PWM输出到这两个引脚来实现PWM调速. IN口控制正反转, EN口用来调速","categories":[],"tags":[{"name":"模块","slug":"模块","permalink":"https://blog.xsaistudio.cn/tags/%E6%A8%A1%E5%9D%97/"},{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"}]},{"title":"hello hexo","slug":"hello-hexo","date":"2022-12-07T14:37:30.000Z","updated":"2023-02-26T00:35:27.681Z","comments":true,"path":"2022/12/07/hello-hexo/","link":"","permalink":"https://blog.xsaistudio.cn/2022/12/07/hello-hexo/","excerpt":"","text":"HELLO LLS你好！世界，你好！YWM","categories":[],"tags":[{"name":"first","slug":"first","permalink":"https://blog.xsaistudio.cn/tags/first/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-12-07T06:05:11.427Z","updated":"2023-01-07T03:35:56.005Z","comments":true,"path":"2022/12/07/hello-world/","link":"","permalink":"https://blog.xsaistudio.cn/2022/12/07/hello-world/","excerpt":"hexo简单用法","text":"hexo简单用法 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://blog.xsaistudio.cn/tags/Ubuntu/"},{"name":"ROS","slug":"ROS","permalink":"https://blog.xsaistudio.cn/tags/ROS/"},{"name":"Gazebo","slug":"Gazebo","permalink":"https://blog.xsaistudio.cn/tags/Gazebo/"},{"name":"模块","slug":"模块","permalink":"https://blog.xsaistudio.cn/tags/%E6%A8%A1%E5%9D%97/"},{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"电机","slug":"电机","permalink":"https://blog.xsaistudio.cn/tags/%E7%94%B5%E6%9C%BA/"},{"name":"HAL","slug":"HAL","permalink":"https://blog.xsaistudio.cn/tags/HAL/"},{"name":"STM32","slug":"STM32","permalink":"https://blog.xsaistudio.cn/tags/STM32/"},{"name":"first","slug":"first","permalink":"https://blog.xsaistudio.cn/tags/first/"}]}