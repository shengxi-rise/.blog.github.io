{"meta":{"title":"YWM'S BLOG","subtitle":"","description":"","author":"YWM","url":"https://blog.xsaistudio.cn","root":"/"},"pages":[],"posts":[{"title":"蓝牙小车之改bug","slug":"蓝牙小车之改bug","date":"2023-01-09T15:21:26.000Z","updated":"2023-01-10T02:33:39.136Z","comments":true,"path":"2023/01/09/蓝牙小车之改bug/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/09/%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6%E4%B9%8B%E6%94%B9bug/","excerpt":"经典写代码半小时，改bug两小时","text":"经典写代码半小时，改bug两小时 串口接收中断 在cube配置UART的时候,忘记在中断接收那里✔了… 串口接收数据过程 发送数据时,是整体打包发送. (在中断回调函数中)在接收的时候,是一位一位读取的,在检测到后面两个截止位的时候,就会停止接收,进入下一个任务. 如果在检测到截止位就立即清空数据包, 那么在外面的大循环中就无法判断到接收到的数据包, 应该在执行完判断任务后再清空. 串口接收到的数据包 通过普通的usb转串口模块,接收到的数据包有两个截止位(0X0D,0X0A) 但是用蓝牙通信发送的,只是软件上配置的数据,没有加截止位 printf的重定向在usart.c源文件中(针对于 cube),添加下面的代码 12345678910111213141516#include &lt;stdio.h&gt;extern UART_HandleTypeDef huart1;//只重定向到了UART1//重定向printf函数到串口int fputc(int ch,FILE* f)&#123; HAL_UART_Transmit(&amp;huart1,(uint8_t* )&amp;ch,1,1000); //注意这里的int类型的ch,要强制转换一下类型 return ch;&#125;//重定向scanf函数到串口int fgetc(FILE* F)&#123; uint8_t ch_r = 0; HAL_UART_Receive(&amp;huart1,&amp;ch_r,1,0xffff); return ch_r;&#125; 重定向原理: printf默认输出设备是显示器终端,如果要显示到串口或者lcd之类上,就要重定向. 注意 : 还要在keil上勾选use microlib sizeof的计算 sizeof计算的是定义到的数组长度,也就是定义了多少,计算出来就是多少 . 还有一个计算是实际的长度,忘记是什么函数了 STM32cube配置出现中文乱码在Windows的环境变量中加入这个, 这种方法目前还没测试过. 变量名称：JAVA_TOOL_OPTIONS 变量值：-Dfile.encoding &#x3D; UTF-8","categories":[],"tags":[{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"HAL","slug":"HAL","permalink":"https://blog.xsaistudio.cn/tags/HAL/"},{"name":"STM32","slug":"STM32","permalink":"https://blog.xsaistudio.cn/tags/STM32/"}]},{"title":"HAL之UART","slug":"HAL之UART","date":"2023-01-07T12:24:03.000Z","updated":"2023-01-08T16:04:12.381Z","comments":true,"path":"2023/01/07/HAL之UART/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/07/HAL%E4%B9%8BUART/","excerpt":"UART常用函数，HAL库的串口中断流程","text":"UART常用函数，HAL库的串口中断流程 HAL_UART_Transmit(); 串口发送数据，使用超时管理机制HAL_UART_Transmit_IT(); 串口中断模式发送HAL_UART_Transmit_DMA(); 串口DMA模式发送 HAL_UART_Receive_IT(); 串口中断模式接收HAL_UART_Receive(); 串口接收数据，使用超时管理机制HAL_UART_Transmit_DMA(); 串口DMA模式接收 串口中断流程12345HAL_UART_Receive_IT //中断接收函数USART2_IRQHandler(void) //中断服务函数HAL_UART_IRQHandler(*huart) //中断处理函数UART_Receive_IT(*huart) //接收函数HAL_UART_RxCpltCallback(huart) //中断回调函数(要自己修改) 12graph TBA(中断接收函数)--&gt;B(中断服务函数)--&gt;C(中断处理函数)--&gt;D(接收函数)--&gt;E(中断回调函数)--&gt;A(中断接收函数)","categories":[],"tags":[{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"HAL","slug":"HAL","permalink":"https://blog.xsaistudio.cn/tags/HAL/"},{"name":"STM32","slug":"STM32","permalink":"https://blog.xsaistudio.cn/tags/STM32/"}]},{"title":"HAL之GPIO","slug":"HAL之GPIO","date":"2023-01-07T09:40:59.000Z","updated":"2023-01-07T12:24:45.797Z","comments":true,"path":"2023/01/07/HAL之GPIO/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/07/HAL%E4%B9%8BGPIO/","excerpt":"常用的GPIO函数以及工作模式","text":"常用的GPIO函数以及工作模式 常用函数输入函数 HAL_GPIO_ReadPin() &#x2F;&#x2F;读取引脚电平 输出函数 HAL_GPIO_WritePin() &#x2F;&#x2F;写入高低电平 HAL_GPIO_TogglePin() &#x2F;&#x2F;反转电平 中断函数 HAL_GPIO_EXTI_IRQHandler() &#x2F;&#x2F;外部中断服务函数 HAL_GPIO_EXTI_Callback() &#x2F;&#x2F;外部中断回调函数 工作模式输入模式GPIO_Input浮空输入 引脚电平是真实的外部连接器件电压，电平有不确定性 上拉输入 默认通过电阻上拉到VCC,不接外部器件时可以读出高电平 下拉输入 默认通过电阻下拉到GND,不接外部器件时可以读出低电平 输出模式推挽(push pull) 一种使用一对选择性地从相连负载灌电流或者拉电流的器件的电路。 开漏(open drain) 高电平时没有驱动能力，需要借助外部上拉电阻完成对外驱动。 浮空(no-pull-) 引脚电平是真实的外部连接器件电压，电平有不确定性 上拉 默认通过电阻上拉到VCC,不接外部器件时可以输出高电平 下拉 默认通过电阻下拉到GND,不接外部器件时可以输出低电平","categories":[],"tags":[{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"HAL","slug":"HAL","permalink":"https://blog.xsaistudio.cn/tags/HAL/"},{"name":"STM32","slug":"STM32","permalink":"https://blog.xsaistudio.cn/tags/STM32/"}]},{"title":"蓝牙模块HC-05","slug":"蓝牙模块HC-05","date":"2023-01-07T03:32:23.000Z","updated":"2023-01-07T12:37:11.400Z","comments":true,"path":"2023/01/07/蓝牙模块HC-05/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/07/%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97HC-05/","excerpt":"HC-05蓝牙模块基本原理及使用方法","text":"HC-05蓝牙模块基本原理及使用方法 波特率 AT测试的波特率默认为38400,1停止位,8数据位 蓝牙通信波特率默认为9600,0,0 AT测试 接线: GND-&gt;GND RXD-&gt;TXD TXD-&gt;RXD VCC-&gt;5V EN和STATE不接 注意: 模块上的VCC不能接3.3V, 资料说不可以，但是我接VCC和3V3都没问题。 按住模块上的按键再去供电, 进入慢闪(一秒一次)模式，即为AT测试 AT测试命令1234567891011121314151617181. 先输入AT，当返回OK时，代表进入AT测试AT+VERSION //当前版本AT+ORGL //恢复出厂设置AT+RESET //复位AT+NAME //蓝牙名字AT+PSWD //连接密码AT+ROLE //模式选择 1：从机 2：主机 3：回环AT+UART //波特率AT+ADDR //蓝牙地址码AT+STATE //当前工作状态AT+DISC //断开连接AT+RNAME //获取远程蓝牙设备名称AT+ADCN //获取蓝牙配对表中设备个数...... 蓝牙连接AT测试，查询完相应数据后，拔掉电源。这次不用按按键，直接插电。模块的灯快闪，进入等待连接状态。 手机打开蓝牙调试器 , 蓝牙调试器介绍 找到设备, 默认的连接密码为1234.","categories":[],"tags":[{"name":"模块","slug":"模块","permalink":"https://blog.xsaistudio.cn/tags/%E6%A8%A1%E5%9D%97/"},{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"}]},{"title":"L298N驱动","slug":"L298N驱动","date":"2023-01-06T10:00:10.000Z","updated":"2023-01-08T14:46:11.462Z","comments":true,"path":"2023/01/06/L298N驱动/","link":"","permalink":"https://blog.xsaistudio.cn/2023/01/06/L298N%E9%A9%B1%E5%8A%A8/","excerpt":"L298N原理图及驱动方式","text":"L298N原理图及驱动方式 L298N 原理图 接线方式 工作电压: 9~12v 将电池盒或者锂电池的正极接到上图的vcc 如果安装了5v跳线帽, 5v接口是用来给单片机供电的, 这种情况下, 供电电源的GND要分两条, 模块和单片机共地 如果用5V来给单片机供电的话, 可能会出问题, 因为没有稳压, 可能会有掉压的情况. 电机分别接上图8, 9 引脚7 驱动方式 电机 旋转方式 IN1 IN2 IN3 IN4 M1 正转 高 低 &#x2F; &#x2F; (左) 反转 低 高 &#x2F; &#x2F; 停止 低 低 &#x2F; &#x2F; M2 正转 &#x2F; &#x2F; 高 低 (右) 反转 &#x2F; &#x2F; 低 高 停止 &#x2F; &#x2F; 低 低 如果要用PWM调速的话, 要拔掉ENA和ENB的跳线帽, 将PWM输出到这两个引脚来实现PWM调速. IN口控制正反转, EN口用来调速","categories":[],"tags":[{"name":"模块","slug":"模块","permalink":"https://blog.xsaistudio.cn/tags/%E6%A8%A1%E5%9D%97/"},{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"}]},{"title":"hello hexo","slug":"hello-hexo","date":"2022-12-07T14:37:30.000Z","updated":"2023-01-07T02:44:40.995Z","comments":true,"path":"2022/12/07/hello-hexo/","link":"","permalink":"https://blog.xsaistudio.cn/2022/12/07/hello-hexo/","excerpt":"","text":"HELLO LLS你好！世界，你好！YWM，AND I LOVE YOU LSQ","categories":[],"tags":[{"name":"first","slug":"first","permalink":"https://blog.xsaistudio.cn/tags/first/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-12-07T06:05:11.427Z","updated":"2023-01-07T03:35:56.005Z","comments":true,"path":"2022/12/07/hello-world/","link":"","permalink":"https://blog.xsaistudio.cn/2022/12/07/hello-world/","excerpt":"hexo简单用法","text":"hexo简单用法 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"单片机","slug":"单片机","permalink":"https://blog.xsaistudio.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"HAL","slug":"HAL","permalink":"https://blog.xsaistudio.cn/tags/HAL/"},{"name":"STM32","slug":"STM32","permalink":"https://blog.xsaistudio.cn/tags/STM32/"},{"name":"模块","slug":"模块","permalink":"https://blog.xsaistudio.cn/tags/%E6%A8%A1%E5%9D%97/"},{"name":"first","slug":"first","permalink":"https://blog.xsaistudio.cn/tags/first/"}]}